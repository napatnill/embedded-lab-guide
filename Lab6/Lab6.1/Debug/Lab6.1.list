
Lab6.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c0  080055c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080055c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000403c  20000074  0800563c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  0800563c  000240b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3e8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cc  00000000  00000000  0002e48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00031570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168cf  00000000  00000000  000320a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc69  00000000  00000000  0004896f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbcd  00000000  00000000  000565d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e41a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000344c  00000000  00000000  000e41f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800544c 	.word	0x0800544c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800544c 	.word	0x0800544c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b0ac      	sub	sp, #176	; 0xb0
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fb69 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f89f 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f931 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f905 	bl	80007e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80005ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff53 	bl	800249a <osMutexCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <main+0x118>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <main+0x11c>)
 80005fc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800060e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fee0 	bl	80023da <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <main+0x120>)
 800061e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000620:	4b32      	ldr	r3, [pc, #200]	; (80006ec <main+0x124>)
 8000622:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fecd 	bl	80023da <osThreadCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <main+0x128>)
 8000644:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <main+0x12c>)
 8000648:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800064c:	461d      	mov	r5, r3
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800065a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f001 feba 	bl	80023da <osThreadCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <main+0x130>)
 800066a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <main+0x134>)
 800066e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fea7 	bl	80023da <osThreadCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <main+0x138>)
 8000690:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x13c>)
 8000694:	f107 041c 	add.w	r4, r7, #28
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fe94 	bl	80023da <osThreadCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <main+0x140>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <main+0x144>)
 80006ba:	463c      	mov	r4, r7
 80006bc:	461d      	mov	r5, r3
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 80006ca:	463b      	mov	r3, r7
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fe83 	bl	80023da <osThreadCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <main+0x148>)
 80006d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006da:	f001 fe77 	bl	80023cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	e7fe      	b.n	80006de <main+0x116>
 80006e0:	20000340 	.word	0x20000340
 80006e4:	080054ac 	.word	0x080054ac
 80006e8:	20000328 	.word	0x20000328
 80006ec:	080054c8 	.word	0x080054c8
 80006f0:	2000032c 	.word	0x2000032c
 80006f4:	080054e4 	.word	0x080054e4
 80006f8:	20000330 	.word	0x20000330
 80006fc:	08005500 	.word	0x08005500
 8000700:	20000334 	.word	0x20000334
 8000704:	0800551c 	.word	0x0800551c
 8000708:	20000338 	.word	0x20000338
 800070c:	08005538 	.word	0x08005538
 8000710:	2000033c 	.word	0x2000033c

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fa2a 	bl	8004b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000784:	2310      	movs	r3, #16
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078e:	2304      	movs	r3, #4
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fd92 	bl	80012c4 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a6:	f000 f96d 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fff4 	bl	80017b4 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f957 	bl	8000a84 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f001 f9e8 	bl	8001bf4 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f92b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200002e4 	.word	0x200002e4
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <MX_GPIO_Init+0xf8>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2f      	ldr	r2, [pc, #188]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_GPIO_Init+0xf8>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0xf8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_GPIO_Init+0xf8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_GPIO_Init+0xf8>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_GPIO_Init+0xf8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	21e0      	movs	r1, #224	; 0xe0
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_GPIO_Init+0xfc>)
 80008c8:	f000 fcc8 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_GPIO_Init+0x100>)
 80008d2:	f000 fcc3 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_GPIO_Init+0x104>)
 80008ee:	f000 fb31 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80008f2:	23e0      	movs	r3, #224	; 0xe0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_GPIO_Init+0xfc>)
 800090a:	f000 fb23 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0x100>)
 8000926:	f000 fb15 	bl	8000f54 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020400 	.word	0x40020400
 8000940:	40020800 	.word	0x40020800

08000944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800094c:	2120      	movs	r1, #32
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <StartDefaultTask+0x18>)
 8000950:	f000 fc9d 	bl	800128e <HAL_GPIO_TogglePin>
    osDelay(50);
 8000954:	2032      	movs	r0, #50	; 0x32
 8000956:	f001 fd8c 	bl	8002472 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800095a:	e7f7      	b.n	800094c <StartDefaultTask+0x8>
 800095c:	40020000 	.word	0x40020000

08000960 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <StartTask02+0x18>)
 800096c:	f000 fc8f 	bl	800128e <HAL_GPIO_TogglePin>
    osDelay(18);
 8000970:	2012      	movs	r0, #18
 8000972:	f001 fd7e 	bl	8002472 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000976:	e7f7      	b.n	8000968 <StartTask02+0x8>
 8000978:	40020000 	.word	0x40020000

0800097c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <StartTask03+0x18>)
 8000988:	f000 fc81 	bl	800128e <HAL_GPIO_TogglePin>
    osDelay(128);
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	f001 fd70 	bl	8002472 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000992:	e7f7      	b.n	8000984 <StartTask03+0x8>
 8000994:	40020000 	.word	0x40020000

08000998 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <StartTask04+0x18>)
 80009a4:	f000 fc73 	bl	800128e <HAL_GPIO_TogglePin>
    osDelay(64);
 80009a8:	2040      	movs	r0, #64	; 0x40
 80009aa:	f001 fd62 	bl	8002472 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80009ae:	e7f7      	b.n	80009a0 <StartTask04+0x8>
 80009b0:	40020400 	.word	0x40020400

080009b4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	int threadID = 0; // threadID is 0 for one thread and 1 for another
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
	sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 80009c4:	f107 0008 	add.w	r0, r7, #8
 80009c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009cc:	4910      	ldr	r1, [pc, #64]	; (8000a10 <StartTask05+0x5c>)
 80009ce:	f004 f8dd 	bl	8004b8c <siprintf>
	idx ++;
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	3301      	adds	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	osMutexWait(myMutex01Handle, osWaitForever);
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <StartTask05+0x60>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fd73 	bl	80024cc <osMutexWait>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fbf8 	bl	80001e0 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f107 0108 	add.w	r1, r7, #8
 80009f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <StartTask05+0x64>)
 80009fe:	f001 f946 	bl	8001c8e <HAL_UART_Transmit>
	osMutexRelease(myMutex01Handle);
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <StartTask05+0x60>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fdae 	bl	8002568 <osMutexRelease>
	while(1) {
 8000a0c:	e7da      	b.n	80009c4 <StartTask05+0x10>
 8000a0e:	bf00      	nop
 8000a10:	08005554 	.word	0x08005554
 8000a14:	20000340 	.word	0x20000340
 8000a18:	200002e4 	.word	0x200002e4

08000a1c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	int threadID = 1; // threadID is 0 for one thread and 1 for another
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
	sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000a2c:	f107 0008 	add.w	r0, r7, #8
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a34:	4910      	ldr	r1, [pc, #64]	; (8000a78 <StartTask06+0x5c>)
 8000a36:	f004 f8a9 	bl	8004b8c <siprintf>
	idx ++;
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	osMutexWait(myMutex01Handle, osWaitForever);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <StartTask06+0x60>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fd3f 	bl	80024cc <osMutexWait>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbc4 	bl	80001e0 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f107 0108 	add.w	r1, r7, #8
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <StartTask06+0x64>)
 8000a66:	f001 f912 	bl	8001c8e <HAL_UART_Transmit>
	osMutexRelease(myMutex01Handle);
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <StartTask06+0x60>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fd7a 	bl	8002568 <osMutexRelease>
	while(1) {
 8000a74:	e7da      	b.n	8000a2c <StartTask06+0x10>
 8000a76:	bf00      	nop
 8000a78:	08005554 	.word	0x08005554
 8000a7c:	20000340 	.word	0x20000340
 8000a80:	200002e4 	.word	0x200002e4

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x54>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fa14 	bl	8000f02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12b      	bne.n	8000b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b5e:	f000 f9f9 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f8ce 	bl	8000d48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bac:	f003 f952 	bl	8003e54 <xTaskGetSchedulerState>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d001      	beq.n	8000bba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bb6:	f003 fd2f 	bl	8004618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f003 ff8c 	bl	8004b0c <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20020000 	.word	0x20020000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000344 	.word	0x20000344
 8000c28:	200040b0 	.word	0x200040b0

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 ff4b 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fca1 	bl	80005c8 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c94:	080055c8 	.word	0x080055c8
  ldr r2, =_sbss
 8000c98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c9c:	200040b0 	.word	0x200040b0

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f90d 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff feda 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f917 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f8ed 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000348 	.word	0x20000348

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000348 	.word	0x20000348

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	400b      	ands	r3, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e267      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e242      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcf8 	bl	8000d70 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcf4 	bl	8000d70 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e207      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fce4 	bl	8000d70 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fce0 	bl	8000d70 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f3      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc99 	bl	8000d70 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc95 	bl	8000d70 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a8      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4925      	ldr	r1, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc78 	bl	8000d70 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc74 	bl	8000d70 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e187      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc58 	bl	8000d70 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc54 	bl	8000d70 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e167      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc41 	bl	8000d70 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc3d 	bl	8000d70 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d907      	bls.n	8001510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e150      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ea      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8097 	beq.w	8001658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbfd 	bl	8000d70 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fbf9 	bl	8000d70 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e10c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x2ea>
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x30c>
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbbe 	bl	8000d70 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbba 	bl	8000d70 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0cb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x334>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fba8 	bl	8000d70 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fba4 	bl	8000d70 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b5      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a1 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d05c      	beq.n	8001728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d141      	bne.n	80016fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb78 	bl	8000d70 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb74 	bl	8000d70 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e087      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb4d 	bl	8000d70 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb49 	bl	8000d70 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e05c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x416>
 80016f8:	e054      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb36 	bl	8000d70 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb32 	bl	8000d70 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e045      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e038      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
 800173c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d028      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa64 	bl	8000d70 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa60 	bl	8000d70 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9c4 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	0800556c 	.word	0x0800556c
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b094      	sub	sp, #80	; 0x50
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80e1 	bhi.w	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0db      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b8:	e0db      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019be:	e0d8      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	1a51      	subs	r1, r2, r1
 8001a0e:	6139      	str	r1, [r7, #16]
 8001a10:	4629      	mov	r1, r5
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a24:	4659      	mov	r1, fp
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4651      	mov	r1, sl
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4651      	mov	r1, sl
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4651      	mov	r1, sl
 8001a34:	ebb2 0801 	subs.w	r8, r2, r1
 8001a38:	4659      	mov	r1, fp
 8001a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	eb18 0303 	adds.w	r3, r8, r3
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	462b      	mov	r3, r5
 8001a60:	eb49 0303 	adc.w	r3, r9, r3
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a72:	4629      	mov	r1, r5
 8001a74:	024b      	lsls	r3, r1, #9
 8001a76:	4621      	mov	r1, r4
 8001a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	024a      	lsls	r2, r1, #9
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a86:	2200      	movs	r2, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a90:	f7fe fbfe 	bl	8000290 <__aeabi_uldivmod>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	e058      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0159      	lsls	r1, r3, #5
 8001ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aca:	0150      	lsls	r0, r2, #5
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af0:	ebb2 040a 	subs.w	r4, r2, sl
 8001af4:	eb63 050b 	sbc.w	r5, r3, fp
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00eb      	lsls	r3, r5, #3
 8001b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b06:	00e2      	lsls	r2, r4, #3
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	18e3      	adds	r3, r4, r3
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	464b      	mov	r3, r9
 8001b14:	eb45 0303 	adc.w	r3, r5, r3
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	61fa      	str	r2, [r7, #28]
 8001b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b44:	f7fe fba4 	bl	8000290 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	0800557c 	.word	0x0800557c

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffdc 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0b5b      	lsrs	r3, r3, #13
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	0800557c 	.word	0x0800557c

08001bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e03f      	b.n	8001c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ff64 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f929 	bl	8001e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b08a      	sub	sp, #40	; 0x28
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d17c      	bne.n	8001da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_UART_Transmit+0x2c>
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e075      	b.n	8001daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_UART_Transmit+0x3e>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e06e      	b.n	8001daa <HAL_UART_Transmit+0x11c>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2221      	movs	r2, #33	; 0x21
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce2:	f7ff f845 	bl	8000d70 <HAL_GetTick>
 8001ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	d108      	bne.n	8001d10 <HAL_UART_Transmit+0x82>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e003      	b.n	8001d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d20:	e02a      	b.n	8001d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f840 	bl	8001db2 <UART_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e036      	b.n	8001daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3302      	adds	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e007      	b.n	8001d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1cf      	bne.n	8001d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f810 	bl	8001db2 <UART_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e006      	b.n	8001daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b090      	sub	sp, #64	; 0x40
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc2:	e050      	b.n	8001e66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d04c      	beq.n	8001e66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dd2:	f7fe ffcd 	bl	8000d70 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d241      	bcs.n	8001e66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	330c      	adds	r3, #12
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	e853 3f00 	ldrex	r3, [r3]
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	330c      	adds	r3, #12
 8001e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e02:	637a      	str	r2, [r7, #52]	; 0x34
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e0a:	e841 2300 	strex	r3, r2, [r1]
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e5      	bne.n	8001de2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	e853 3f00 	ldrex	r3, [r3]
 8001e24:	613b      	str	r3, [r7, #16]
   return(result);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3314      	adds	r3, #20
 8001e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e36:	623a      	str	r2, [r7, #32]
 8001e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e3a:	69f9      	ldr	r1, [r7, #28]
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	e841 2300 	strex	r3, r2, [r1]
 8001e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e5      	bne.n	8001e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e00f      	b.n	8001e86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d09f      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3740      	adds	r7, #64	; 0x40
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e94:	b0c0      	sub	sp, #256	; 0x100
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	ea40 0301 	orr.w	r3, r0, r1
 8001eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ee8:	f021 010c 	bic.w	r1, r1, #12
 8001eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0a:	6999      	ldr	r1, [r3, #24]
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	ea40 0301 	orr.w	r3, r0, r1
 8001f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b8f      	ldr	r3, [pc, #572]	; (800215c <UART_SetConfig+0x2cc>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d005      	beq.n	8001f30 <UART_SetConfig+0xa0>
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b8d      	ldr	r3, [pc, #564]	; (8002160 <UART_SetConfig+0x2d0>)
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d104      	bne.n	8001f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f30:	f7ff fe4c 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8001f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f38:	e003      	b.n	8001f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f3a:	f7ff fe33 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8001f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4c:	f040 810c 	bne.w	8002168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f62:	4622      	mov	r2, r4
 8001f64:	462b      	mov	r3, r5
 8001f66:	1891      	adds	r1, r2, r2
 8001f68:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f6a:	415b      	adcs	r3, r3
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f72:	4621      	mov	r1, r4
 8001f74:	eb12 0801 	adds.w	r8, r2, r1
 8001f78:	4629      	mov	r1, r5
 8001f7a:	eb43 0901 	adc.w	r9, r3, r1
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f92:	4690      	mov	r8, r2
 8001f94:	4699      	mov	r9, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	eb18 0303 	adds.w	r3, r8, r3
 8001f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	eb49 0303 	adc.w	r3, r9, r3
 8001fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	18db      	adds	r3, r3, r3
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	eb42 0303 	adc.w	r3, r2, r3
 8001fca:	657b      	str	r3, [r7, #84]	; 0x54
 8001fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fd4:	f7fe f95c 	bl	8000290 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4b61      	ldr	r3, [pc, #388]	; (8002164 <UART_SetConfig+0x2d4>)
 8001fde:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	011c      	lsls	r4, r3, #4
 8001fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fea:	2200      	movs	r2, #0
 8001fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	1891      	adds	r1, r2, r2
 8001ffe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002000:	415b      	adcs	r3, r3
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002008:	4641      	mov	r1, r8
 800200a:	eb12 0a01 	adds.w	sl, r2, r1
 800200e:	4649      	mov	r1, r9
 8002010:	eb43 0b01 	adc.w	fp, r3, r1
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002028:	4692      	mov	sl, r2
 800202a:	469b      	mov	fp, r3
 800202c:	4643      	mov	r3, r8
 800202e:	eb1a 0303 	adds.w	r3, sl, r3
 8002032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002036:	464b      	mov	r3, r9
 8002038:	eb4b 0303 	adc.w	r3, fp, r3
 800203c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800204c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002054:	460b      	mov	r3, r1
 8002056:	18db      	adds	r3, r3, r3
 8002058:	643b      	str	r3, [r7, #64]	; 0x40
 800205a:	4613      	mov	r3, r2
 800205c:	eb42 0303 	adc.w	r3, r2, r3
 8002060:	647b      	str	r3, [r7, #68]	; 0x44
 8002062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800206a:	f7fe f911 	bl	8000290 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4611      	mov	r1, r2
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <UART_SetConfig+0x2d4>)
 8002076:	fba3 2301 	umull	r2, r3, r3, r1
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2264      	movs	r2, #100	; 0x64
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	1acb      	subs	r3, r1, r3
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <UART_SetConfig+0x2d4>)
 800208c:	fba3 2302 	umull	r2, r3, r3, r2
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002098:	441c      	add	r4, r3
 800209a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020ac:	4642      	mov	r2, r8
 80020ae:	464b      	mov	r3, r9
 80020b0:	1891      	adds	r1, r2, r2
 80020b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020b4:	415b      	adcs	r3, r3
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020bc:	4641      	mov	r1, r8
 80020be:	1851      	adds	r1, r2, r1
 80020c0:	6339      	str	r1, [r7, #48]	; 0x30
 80020c2:	4649      	mov	r1, r9
 80020c4:	414b      	adcs	r3, r1
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020d4:	4659      	mov	r1, fp
 80020d6:	00cb      	lsls	r3, r1, #3
 80020d8:	4651      	mov	r1, sl
 80020da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020de:	4651      	mov	r1, sl
 80020e0:	00ca      	lsls	r2, r1, #3
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	4642      	mov	r2, r8
 80020ea:	189b      	adds	r3, r3, r2
 80020ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020f0:	464b      	mov	r3, r9
 80020f2:	460a      	mov	r2, r1
 80020f4:	eb42 0303 	adc.w	r3, r2, r3
 80020f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002108:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800210c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002110:	460b      	mov	r3, r1
 8002112:	18db      	adds	r3, r3, r3
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
 8002116:	4613      	mov	r3, r2
 8002118:	eb42 0303 	adc.w	r3, r2, r3
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002126:	f7fe f8b3 	bl	8000290 <__aeabi_uldivmod>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <UART_SetConfig+0x2d4>)
 8002130:	fba3 1302 	umull	r1, r3, r3, r2
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	2164      	movs	r1, #100	; 0x64
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	3332      	adds	r3, #50	; 0x32
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <UART_SetConfig+0x2d4>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	f003 0207 	and.w	r2, r3, #7
 800214e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4422      	add	r2, r4
 8002156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002158:	e105      	b.n	8002366 <UART_SetConfig+0x4d6>
 800215a:	bf00      	nop
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800216c:	2200      	movs	r2, #0
 800216e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800217a:	4642      	mov	r2, r8
 800217c:	464b      	mov	r3, r9
 800217e:	1891      	adds	r1, r2, r2
 8002180:	6239      	str	r1, [r7, #32]
 8002182:	415b      	adcs	r3, r3
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800218a:	4641      	mov	r1, r8
 800218c:	1854      	adds	r4, r2, r1
 800218e:	4649      	mov	r1, r9
 8002190:	eb43 0501 	adc.w	r5, r3, r1
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	00eb      	lsls	r3, r5, #3
 800219e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a2:	00e2      	lsls	r2, r4, #3
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	18e3      	adds	r3, r4, r3
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021b0:	464b      	mov	r3, r9
 80021b2:	eb45 0303 	adc.w	r3, r5, r3
 80021b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021d6:	4629      	mov	r1, r5
 80021d8:	008b      	lsls	r3, r1, #2
 80021da:	4621      	mov	r1, r4
 80021dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e0:	4621      	mov	r1, r4
 80021e2:	008a      	lsls	r2, r1, #2
 80021e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021e8:	f7fe f852 	bl	8000290 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4b60      	ldr	r3, [pc, #384]	; (8002374 <UART_SetConfig+0x4e4>)
 80021f2:	fba3 2302 	umull	r2, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	011c      	lsls	r4, r3, #4
 80021fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800220c:	4642      	mov	r2, r8
 800220e:	464b      	mov	r3, r9
 8002210:	1891      	adds	r1, r2, r2
 8002212:	61b9      	str	r1, [r7, #24]
 8002214:	415b      	adcs	r3, r3
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800221c:	4641      	mov	r1, r8
 800221e:	1851      	adds	r1, r2, r1
 8002220:	6139      	str	r1, [r7, #16]
 8002222:	4649      	mov	r1, r9
 8002224:	414b      	adcs	r3, r1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002234:	4659      	mov	r1, fp
 8002236:	00cb      	lsls	r3, r1, #3
 8002238:	4651      	mov	r1, sl
 800223a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223e:	4651      	mov	r1, sl
 8002240:	00ca      	lsls	r2, r1, #3
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4603      	mov	r3, r0
 8002248:	4642      	mov	r2, r8
 800224a:	189b      	adds	r3, r3, r2
 800224c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002250:	464b      	mov	r3, r9
 8002252:	460a      	mov	r2, r1
 8002254:	eb42 0303 	adc.w	r3, r2, r3
 8002258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
 8002266:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002274:	4649      	mov	r1, r9
 8002276:	008b      	lsls	r3, r1, #2
 8002278:	4641      	mov	r1, r8
 800227a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800227e:	4641      	mov	r1, r8
 8002280:	008a      	lsls	r2, r1, #2
 8002282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002286:	f7fe f803 	bl	8000290 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <UART_SetConfig+0x4e4>)
 8002290:	fba3 1302 	umull	r1, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	2164      	movs	r1, #100	; 0x64
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	3332      	adds	r3, #50	; 0x32
 80022a2:	4a34      	ldr	r2, [pc, #208]	; (8002374 <UART_SetConfig+0x4e4>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	441c      	add	r4, r3
 80022b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b4:	2200      	movs	r2, #0
 80022b6:	673b      	str	r3, [r7, #112]	; 0x70
 80022b8:	677a      	str	r2, [r7, #116]	; 0x74
 80022ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022be:	4642      	mov	r2, r8
 80022c0:	464b      	mov	r3, r9
 80022c2:	1891      	adds	r1, r2, r2
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	415b      	adcs	r3, r3
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ce:	4641      	mov	r1, r8
 80022d0:	1851      	adds	r1, r2, r1
 80022d2:	6039      	str	r1, [r7, #0]
 80022d4:	4649      	mov	r1, r9
 80022d6:	414b      	adcs	r3, r1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022e6:	4659      	mov	r1, fp
 80022e8:	00cb      	lsls	r3, r1, #3
 80022ea:	4651      	mov	r1, sl
 80022ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f0:	4651      	mov	r1, sl
 80022f2:	00ca      	lsls	r2, r1, #3
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	4603      	mov	r3, r0
 80022fa:	4642      	mov	r2, r8
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002300:	464b      	mov	r3, r9
 8002302:	460a      	mov	r2, r1
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	663b      	str	r3, [r7, #96]	; 0x60
 8002314:	667a      	str	r2, [r7, #100]	; 0x64
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002322:	4649      	mov	r1, r9
 8002324:	008b      	lsls	r3, r1, #2
 8002326:	4641      	mov	r1, r8
 8002328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800232c:	4641      	mov	r1, r8
 800232e:	008a      	lsls	r2, r1, #2
 8002330:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002334:	f7fd ffac 	bl	8000290 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <UART_SetConfig+0x4e4>)
 800233e:	fba3 1302 	umull	r1, r3, r3, r2
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2164      	movs	r1, #100	; 0x64
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <UART_SetConfig+0x4e4>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4422      	add	r2, r4
 8002364:	609a      	str	r2, [r3, #8]
}
 8002366:	bf00      	nop
 8002368:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002372:	bf00      	nop
 8002374:	51eb851f 	.word	0x51eb851f

08002378 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238a:	2b84      	cmp	r3, #132	; 0x84
 800238c:	d005      	beq.n	800239a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800238e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4413      	add	r3, r2
 8002396:	3303      	adds	r3, #3
 8002398:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ae:	f3ef 8305 	mrs	r3, IPSR
 80023b2:	607b      	str	r3, [r7, #4]
  return(result);
 80023b4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80023d0:	f001 f942 	bl	8003658 <vTaskStartScheduler>
  
  return osOK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}

080023da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023dc:	b089      	sub	sp, #36	; 0x24
 80023de:	af04      	add	r7, sp, #16
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <osThreadCreate+0x54>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01c      	beq.n	800242e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685c      	ldr	r4, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681d      	ldr	r5, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691e      	ldr	r6, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffb6 	bl	8002378 <makeFreeRtosPriority>
 800240c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002416:	9202      	str	r2, [sp, #8]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	9100      	str	r1, [sp, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4632      	mov	r2, r6
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f000 ff50 	bl	80032c8 <xTaskCreateStatic>
 8002428:	4603      	mov	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e01c      	b.n	8002468 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685c      	ldr	r4, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800243a:	b29e      	uxth	r6, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff98 	bl	8002378 <makeFreeRtosPriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	9200      	str	r2, [sp, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	4632      	mov	r2, r6
 8002456:	4629      	mov	r1, r5
 8002458:	4620      	mov	r0, r4
 800245a:	f000 ff92 	bl	8003382 <xTaskCreate>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002468:	68fb      	ldr	r3, [r7, #12]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002472 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <osDelay+0x16>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	e000      	b.n	800248a <osDelay+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f8b0 	bl	80035f0 <vTaskDelay>
  
  return osOK;
 8002490:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4619      	mov	r1, r3
 80024b0:	2001      	movs	r0, #1
 80024b2:	f000 faae 	bl	8002a12 <xQueueCreateMutexStatic>
 80024b6:	4603      	mov	r3, r0
 80024b8:	e003      	b.n	80024c2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 fa91 	bl	80029e2 <xQueueCreateMutex>
 80024c0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <osMutexWait+0x18>
    return osErrorParameter;
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	e03a      	b.n	800255a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d103      	bne.n	80024f8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e009      	b.n	800250c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <osMutexWait+0x40>
      ticks = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800250c:	f7ff ff4c 	bl	80023a8 <inHandlerMode>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d017      	beq.n	8002546 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	461a      	mov	r2, r3
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fd2a 	bl	8002f78 <xQueueReceiveFromISR>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <osMutexWait+0x62>
      return osErrorOS;
 800252a:	23ff      	movs	r3, #255	; 0xff
 800252c:	e015      	b.n	800255a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <osMutexWait+0x8c>
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <osMutexWait+0x98>)
 8002536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	e008      	b.n	8002558 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fc09 	bl	8002d60 <xQueueSemaphoreTake>
 800254e:	4603      	mov	r3, r0
 8002550:	2b01      	cmp	r3, #1
 8002552:	d001      	beq.n	8002558 <osMutexWait+0x8c>
    return osErrorOS;
 8002554:	23ff      	movs	r3, #255	; 0xff
 8002556:	e000      	b.n	800255a <osMutexWait+0x8e>
  }
  
  return osOK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002578:	f7ff ff16 	bl	80023a8 <inHandlerMode>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb5b 	bl	8002c44 <xQueueGiveFromISR>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d001      	beq.n	8002598 <osMutexRelease+0x30>
      return osErrorOS;
 8002594:	23ff      	movs	r3, #255	; 0xff
 8002596:	e017      	b.n	80025c8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <osMutexRelease+0x5e>
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <osMutexRelease+0x68>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e00a      	b.n	80025c6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa46 	bl	8002a48 <xQueueGenericSend>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80025c2:	23ff      	movs	r3, #255	; 0xff
 80025c4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	e000ed04 	.word	0xe000ed04

080025d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f103 0208 	add.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f103 0208 	add.w	r2, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 0208 	add.w	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e00c      	b.n	80026b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3308      	adds	r3, #8
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e002      	b.n	80026a4 <vListInsert+0x2e>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d2f6      	bcs.n	800269e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	601a      	str	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6852      	ldr	r2, [r2, #4]
 8002708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	d103      	bne.n	800271c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002766:	f001 fec5 	bl	80044f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	441a      	add	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	3b01      	subs	r3, #1
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	441a      	add	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d114      	bne.n	80027e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01a      	beq.n	80027fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3310      	adds	r3, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 f987 	bl	8003adc <xTaskRemoveFromEventList>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <xQueueGenericReset+0xcc>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	e009      	b.n	80027fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3310      	adds	r3, #16
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fef2 	bl	80025d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff feed 	bl	80025d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027fa:	f001 feab 	bl	8004554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <xQueueGenericCreateStatic+0x52>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <xQueueGenericCreateStatic+0x56>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueGenericCreateStatic+0x58>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	623b      	str	r3, [r7, #32]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <xQueueGenericCreateStatic+0x7e>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericCreateStatic+0x82>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericCreateStatic+0x84>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61fb      	str	r3, [r7, #28]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028aa:	2348      	movs	r3, #72	; 0x48
 80028ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b48      	cmp	r3, #72	; 0x48
 80028b2:	d00a      	beq.n	80028ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61bb      	str	r3, [r7, #24]
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f83f 	bl	8002970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	613b      	str	r3, [r7, #16]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3348      	adds	r3, #72	; 0x48
 8002934:	4618      	mov	r0, r3
 8002936:	f001 feff 	bl	8004738 <pvPortMalloc>
 800293a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3348      	adds	r3, #72	; 0x48
 800294a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f805 	bl	8002970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002966:	69bb      	ldr	r3, [r7, #24]
	}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e002      	b.n	8002992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800299e:	2101      	movs	r1, #1
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	f7ff fecb 	bl	800273c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80029ce:	2300      	movs	r3, #0
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f837 	bl	8002a48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	461a      	mov	r2, r3
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff7e 	bl	80028fc <xQueueGenericCreate>
 8002a00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ffd3 	bl	80029ae <prvInitialiseMutex>

		return xNewQueue;
 8002a08:	68fb      	ldr	r3, [r7, #12]
	}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	4603      	mov	r3, r0
 8002a1a:	6039      	str	r1, [r7, #0]
 8002a1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6939      	ldr	r1, [r7, #16]
 8002a30:	6978      	ldr	r0, [r7, #20]
 8002a32:	f7ff feeb 	bl	800280c <xQueueGenericCreateStatic>
 8002a36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff ffb8 	bl	80029ae <prvInitialiseMutex>

		return xNewQueue;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericSend+0x32>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <xQueueGenericSend+0x40>
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <xQueueGenericSend+0x44>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <xQueueGenericSend+0x46>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <xQueueGenericSend+0x60>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSend+0x6e>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <xQueueGenericSend+0x72>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueGenericSend+0x74>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	623b      	str	r3, [r7, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ad6:	f001 f9bd 	bl	8003e54 <xTaskGetSchedulerState>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <xQueueGenericSend+0x9e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <xQueueGenericSend+0xa2>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericSend+0xa4>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericSend+0xbe>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	61fb      	str	r3, [r7, #28]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b06:	f001 fcf5 	bl	80044f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <xQueueGenericSend+0xd4>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d129      	bne.n	8002b70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b22:	f000 fac1 	bl	80030a8 <prvCopyDataToQueue>
 8002b26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d010      	beq.n	8002b52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	3324      	adds	r3, #36	; 0x24
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 ffd1 	bl	8003adc <xTaskRemoveFromEventList>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b40:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <xQueueGenericSend+0x1f8>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	e00a      	b.n	8002b68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <xQueueGenericSend+0x1f8>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b68:	f001 fcf4 	bl	8004554 <vPortExitCritical>
				return pdPASS;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e063      	b.n	8002c38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b76:	f001 fced 	bl	8004554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e05c      	b.n	8002c38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f809 	bl	8003ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b92:	f001 fcdf 	bl	8004554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b96:	f000 fdbf 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b9a:	f001 fcab 	bl	80044f4 <vPortEnterCritical>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d103      	bne.n	8002bb4 <xQueueGenericSend+0x16c>
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x182>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bca:	f001 fcc3 	bl	8004554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bce:	1d3a      	adds	r2, r7, #4
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fff8 	bl	8003bcc <xTaskCheckForTimeOut>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d124      	bne.n	8002c2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be4:	f000 fb58 	bl	8003298 <prvIsQueueFull>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ff4c 	bl	8003a94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfe:	f000 fae3 	bl	80031c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c02:	f000 fd97 	bl	8003734 <xTaskResumeAll>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af7c 	bne.w	8002b06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <xQueueGenericSend+0x1f8>)
 8002c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	e772      	b.n	8002b06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c22:	f000 fad1 	bl	80031c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c26:	f000 fd85 	bl	8003734 <xTaskResumeAll>
 8002c2a:	e76c      	b.n	8002b06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2e:	f000 facb 	bl	80031c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c32:	f000 fd7f 	bl	8003734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3738      	adds	r7, #56	; 0x38
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	623b      	str	r3, [r7, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	61fb      	str	r3, [r7, #28]
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueGiveFromISR+0x58>
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueGiveFromISR+0x5c>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueGiveFromISR+0x5e>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGiveFromISR+0x78>
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	61bb      	str	r3, [r7, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cbc:	f001 fcfc 	bl	80046b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	617a      	str	r2, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cd8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d22b      	bcs.n	8002d44 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d112      	bne.n	8002d2e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	3324      	adds	r3, #36	; 0x24
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fee1 	bl	8003adc <xTaskRemoveFromEventList>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e007      	b.n	8002d3e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	b25a      	sxtb	r2, r3
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
 8002d42:	e001      	b.n	8002d48 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3738      	adds	r7, #56	; 0x38
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	623b      	str	r3, [r7, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	61fb      	str	r3, [r7, #28]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002db0:	f001 f850 	bl	8003e54 <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <xQueueSemaphoreTake+0x60>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xQueueSemaphoreTake+0x64>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xQueueSemaphoreTake+0x66>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61bb      	str	r3, [r7, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002de0:	f001 fb88 	bl	80044f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d024      	beq.n	8002e3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002e00:	f001 f9d0 	bl	80041a4 <pvTaskIncrementMutexHeldCount>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	3310      	adds	r3, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fe60 	bl	8003adc <xTaskRemoveFromEventList>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <xQueueSemaphoreTake+0x214>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e32:	f001 fb8f 	bl	8004554 <vPortExitCritical>
				return pdPASS;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e097      	b.n	8002f6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	617b      	str	r3, [r7, #20]
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002e5c:	f001 fb7a 	bl	8004554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e082      	b.n	8002f6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fe96 	bl	8003ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e78:	f001 fb6c 	bl	8004554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e7c:	f000 fc4c 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e80:	f001 fb38 	bl	80044f4 <vPortEnterCritical>
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d103      	bne.n	8002e9a <xQueueSemaphoreTake+0x13a>
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d103      	bne.n	8002eb0 <xQueueSemaphoreTake+0x150>
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb0:	f001 fb50 	bl	8004554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb4:	463a      	mov	r2, r7
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fe85 	bl	8003bcc <xTaskCheckForTimeOut>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d132      	bne.n	8002f2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eca:	f000 f9cf 	bl	800326c <prvIsQueueEmpty>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d026      	beq.n	8002f22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002edc:	f001 fb0a 	bl	80044f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ffd3 	bl	8003e90 <xTaskPriorityInherit>
 8002eea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002eec:	f001 fb32 	bl	8004554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fdcb 	bl	8003a94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f00:	f000 f962 	bl	80031c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f04:	f000 fc16 	bl	8003734 <xTaskResumeAll>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f47f af68 	bne.w	8002de0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <xQueueSemaphoreTake+0x214>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	e75e      	b.n	8002de0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f24:	f000 f950 	bl	80031c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f28:	f000 fc04 	bl	8003734 <xTaskResumeAll>
 8002f2c:	e758      	b.n	8002de0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f30:	f000 f94a 	bl	80031c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f34:	f000 fbfe 	bl	8003734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f3a:	f000 f997 	bl	800326c <prvIsQueueEmpty>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f43f af4d 	beq.w	8002de0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002f4c:	f001 fad2 	bl	80044f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f52:	f000 f891 	bl	8003078 <prvGetDisinheritPriorityAfterTimeout>
 8002f56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f892 	bl	8004088 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002f64:	f001 faf6 	bl	8004554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3738      	adds	r7, #56	; 0x38
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	; 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	623b      	str	r3, [r7, #32]
}
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <xQueueReceiveFromISR+0x3a>
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <xQueueReceiveFromISR+0x3e>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <xQueueReceiveFromISR+0x40>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	61fb      	str	r3, [r7, #28]
}
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fd2:	f001 fb71 	bl	80046b8 <vPortValidateInterruptPriority>
	__asm volatile
 8002fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	61ba      	str	r2, [r7, #24]
 8002fec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002fee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02f      	beq.n	800305e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300c:	f000 f8b6 	bl	800317c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	1e5a      	subs	r2, r3, #1
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d112      	bne.n	8003048 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	3310      	adds	r3, #16
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd54 	bl	8003adc <xTaskRemoveFromEventList>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304c:	3301      	adds	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	b25a      	sxtb	r2, r3
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
 800305c:	e001      	b.n	8003062 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f383 8811 	msr	BASEPRI, r3
}
 800306c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003070:	4618      	mov	r0, r3
 8003072:	3738      	adds	r7, #56	; 0x38
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e001      	b.n	800309a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800309a:	68fb      	ldr	r3, [r7, #12]
	}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d14d      	bne.n	800316a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 ff52 	bl	8003f7c <xTaskPriorityDisinherit>
 80030d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e043      	b.n	800316a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d119      	bne.n	800311c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6858      	ldr	r0, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	461a      	mov	r2, r3
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	f001 fd34 	bl	8004b60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	441a      	add	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d32b      	bcc.n	800316a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e026      	b.n	800316a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68d8      	ldr	r0, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	461a      	mov	r2, r3
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	f001 fd1a 	bl	8004b60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	425b      	negs	r3, r3
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	425b      	negs	r3, r3
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d105      	bne.n	800316a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3b01      	subs	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003172:	697b      	ldr	r3, [r7, #20]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d303      	bcc.n	80031b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	461a      	mov	r2, r3
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f001 fcd0 	bl	8004b60 <memcpy>
	}
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031d0:	f001 f990 	bl	80044f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031dc:	e011      	b.n	8003202 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3324      	adds	r3, #36	; 0x24
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fc76 	bl	8003adc <xTaskRemoveFromEventList>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031f6:	f000 fd4b 	bl	8003c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	dce9      	bgt.n	80031de <prvUnlockQueue+0x16>
 800320a:	e000      	b.n	800320e <prvUnlockQueue+0x46>
					break;
 800320c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003216:	f001 f99d 	bl	8004554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800321a:	f001 f96b 	bl	80044f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003224:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003226:	e011      	b.n	800324c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3310      	adds	r3, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fc51 	bl	8003adc <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003240:	f000 fd26 	bl	8003c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	3b01      	subs	r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800324c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dce9      	bgt.n	8003228 <prvUnlockQueue+0x60>
 8003254:	e000      	b.n	8003258 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003256:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003260:	f001 f978 	bl	8004554 <vPortExitCritical>
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003274:	f001 f93e 	bl	80044f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e001      	b.n	800328a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800328a:	f001 f963 	bl	8004554 <vPortExitCritical>

	return xReturn;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032a0:	f001 f928 	bl	80044f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d102      	bne.n	80032b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e001      	b.n	80032ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ba:	f001 f94b 	bl	8004554 <vPortExitCritical>

	return xReturn;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	623b      	str	r3, [r7, #32]
}
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xTaskCreateStatic+0x46>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61fb      	str	r3, [r7, #28]
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800330e:	2354      	movs	r3, #84	; 0x54
 8003310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b54      	cmp	r3, #84	; 0x54
 8003316:	d00a      	beq.n	800332e <xTaskCreateStatic+0x66>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	61bb      	str	r3, [r7, #24]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800332e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01e      	beq.n	8003374 <xTaskCreateStatic+0xac>
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800334e:	2300      	movs	r3, #0
 8003350:	9303      	str	r3, [sp, #12]
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f850 	bl	800340c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800336c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800336e:	f000 f8d5 	bl	800351c <prvAddNewTaskToReadyList>
 8003372:	e001      	b.n	8003378 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003378:	697b      	ldr	r3, [r7, #20]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003382:	b580      	push	{r7, lr}
 8003384:	b08c      	sub	sp, #48	; 0x30
 8003386:	af04      	add	r7, sp, #16
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f9ce 	bl	8004738 <pvPortMalloc>
 800339c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033a4:	2054      	movs	r0, #84	; 0x54
 80033a6:	f001 f9c7 	bl	8004738 <pvPortMalloc>
 80033aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e005      	b.n	80033c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f001 fa88 	bl	80048d0 <vPortFree>
 80033c0:	e001      	b.n	80033c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f80e 	bl	800340c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033f0:	69f8      	ldr	r0, [r7, #28]
 80033f2:	f000 f893 	bl	800351c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e002      	b.n	8003402 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003402:	69bb      	ldr	r3, [r7, #24]
	}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003424:	3b01      	subs	r3, #1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <prvInitialiseNewTask+0x48>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	617b      	str	r3, [r7, #20]
}
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01f      	beq.n	800349a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e012      	b.n	8003486 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	7819      	ldrb	r1, [r3, #0]
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	3334      	adds	r3, #52	; 0x34
 8003470:	460a      	mov	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d006      	beq.n	800348e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d9e9      	bls.n	8003460 <prvInitialiseNewTask+0x54>
 800348c:	e000      	b.n	8003490 <prvInitialiseNewTask+0x84>
			{
				break;
 800348e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003498:	e003      	b.n	80034a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d901      	bls.n	80034ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a8:	2306      	movs	r3, #6
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f8a6 	bl	8002614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f8a1 	bl	8002614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	f1c3 0207 	rsb	r2, r3, #7
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	69b8      	ldr	r0, [r7, #24]
 80034fc:	f000 fecc 	bl	8004298 <pxPortInitialiseStack>
 8003500:	4602      	mov	r2, r0
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003524:	f000 ffe6 	bl	80044f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <prvAddNewTaskToReadyList+0xb8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <prvAddNewTaskToReadyList+0xb8>)
 8003530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <prvAddNewTaskToReadyList+0xbc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800353a:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <prvAddNewTaskToReadyList+0xbc>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003540:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <prvAddNewTaskToReadyList+0xb8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d110      	bne.n	800356a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003548:	f000 fbc6 	bl	8003cd8 <prvInitialiseTaskLists>
 800354c:	e00d      	b.n	800356a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <prvAddNewTaskToReadyList+0xc0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <prvAddNewTaskToReadyList+0xbc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d802      	bhi.n	800356a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <prvAddNewTaskToReadyList+0xbc>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <prvAddNewTaskToReadyList+0xc4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <prvAddNewTaskToReadyList+0xc4>)
 8003572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	2201      	movs	r2, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <prvAddNewTaskToReadyList+0xc8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <prvAddNewTaskToReadyList+0xc8>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <prvAddNewTaskToReadyList+0xcc>)
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7ff f846 	bl	800262e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035a2:	f000 ffd7 	bl	8004554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <prvAddNewTaskToReadyList+0xc0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <prvAddNewTaskToReadyList+0xbc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d207      	bcs.n	80035cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <prvAddNewTaskToReadyList+0xd0>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000044c 	.word	0x2000044c
 80035d8:	2000034c 	.word	0x2000034c
 80035dc:	20000458 	.word	0x20000458
 80035e0:	20000468 	.word	0x20000468
 80035e4:	20000454 	.word	0x20000454
 80035e8:	20000350 	.word	0x20000350
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003602:	4b13      	ldr	r3, [pc, #76]	; (8003650 <vTaskDelay+0x60>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <vTaskDelay+0x30>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60bb      	str	r3, [r7, #8]
}
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003620:	f000 f87a 	bl	8003718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003624:	2100      	movs	r1, #0
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fdd0 	bl	80041cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800362c:	f000 f882 	bl	8003734 <xTaskResumeAll>
 8003630:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <vTaskDelay+0x64>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000474 	.word	0x20000474
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003666:	463a      	mov	r2, r7
 8003668:	1d39      	adds	r1, r7, #4
 800366a:	f107 0308 	add.w	r3, r7, #8
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff90 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	460a      	mov	r2, r1
 8003686:	491e      	ldr	r1, [pc, #120]	; (8003700 <vTaskStartScheduler+0xa8>)
 8003688:	481e      	ldr	r0, [pc, #120]	; (8003704 <vTaskStartScheduler+0xac>)
 800368a:	f7ff fe1d 	bl	80032c8 <xTaskCreateStatic>
 800368e:	4603      	mov	r3, r0
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <vTaskStartScheduler+0xb0>)
 8003692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <vTaskStartScheduler+0xb0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800369c:	2301      	movs	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e001      	b.n	80036a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d116      	bne.n	80036da <vTaskStartScheduler+0x82>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	613b      	str	r3, [r7, #16]
}
 80036be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <vTaskStartScheduler+0xb4>)
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295
 80036c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <vTaskStartScheduler+0xb8>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <vTaskStartScheduler+0xbc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036d4:	f000 fe6c 	bl	80043b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036d8:	e00e      	b.n	80036f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d10a      	bne.n	80036f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60fb      	str	r3, [r7, #12]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <vTaskStartScheduler+0x9e>
}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	08005564 	.word	0x08005564
 8003704:	08003ca9 	.word	0x08003ca9
 8003708:	20000470 	.word	0x20000470
 800370c:	2000046c 	.word	0x2000046c
 8003710:	20000458 	.word	0x20000458
 8003714:	20000450 	.word	0x20000450

08003718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vTaskSuspendAll+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a03      	ldr	r2, [pc, #12]	; (8003730 <vTaskSuspendAll+0x18>)
 8003724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000474 	.word	0x20000474

08003734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <xTaskResumeAll+0x114>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <xTaskResumeAll+0x2c>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	603b      	str	r3, [r7, #0]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003760:	f000 fec8 	bl	80044f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003764:	4b38      	ldr	r3, [pc, #224]	; (8003848 <xTaskResumeAll+0x114>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	4a37      	ldr	r2, [pc, #220]	; (8003848 <xTaskResumeAll+0x114>)
 800376c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <xTaskResumeAll+0x114>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d161      	bne.n	800383a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <xTaskResumeAll+0x118>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d05d      	beq.n	800383a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800377e:	e02e      	b.n	80037de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <xTaskResumeAll+0x11c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3318      	adds	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe ffab 	bl	80026e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe ffa6 	bl	80026e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	2201      	movs	r2, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <xTaskResumeAll+0x120>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <xTaskResumeAll+0x120>)
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <xTaskResumeAll+0x124>)
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fe ff32 	bl	800262e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <xTaskResumeAll+0x128>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <xTaskResumeAll+0x12c>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <xTaskResumeAll+0x11c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cc      	bne.n	8003780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ec:	f000 fb12 	bl	8003e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xTaskResumeAll+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037fc:	f000 f836 	bl	800386c <xTaskIncrementTick>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <xTaskResumeAll+0x12c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <xTaskResumeAll+0x130>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <xTaskResumeAll+0x12c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <xTaskResumeAll+0x134>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f000 fe8b 	bl	8004554 <vPortExitCritical>

	return xAlreadyYielded;
 800383e:	68bb      	ldr	r3, [r7, #8]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000474 	.word	0x20000474
 800384c:	2000044c 	.word	0x2000044c
 8003850:	2000040c 	.word	0x2000040c
 8003854:	20000454 	.word	0x20000454
 8003858:	20000350 	.word	0x20000350
 800385c:	2000034c 	.word	0x2000034c
 8003860:	20000460 	.word	0x20000460
 8003864:	2000045c 	.word	0x2000045c
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003876:	4b4e      	ldr	r3, [pc, #312]	; (80039b0 <xTaskIncrementTick+0x144>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 808e 	bne.w	800399c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003880:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <xTaskIncrementTick+0x148>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003888:	4a4a      	ldr	r2, [pc, #296]	; (80039b4 <xTaskIncrementTick+0x148>)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d120      	bne.n	80038d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003894:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <xTaskIncrementTick+0x14c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	603b      	str	r3, [r7, #0]
}
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <xTaskIncrementTick+0x46>
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <xTaskIncrementTick+0x14c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b40      	ldr	r3, [pc, #256]	; (80039bc <xTaskIncrementTick+0x150>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <xTaskIncrementTick+0x14c>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <xTaskIncrementTick+0x150>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <xTaskIncrementTick+0x154>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <xTaskIncrementTick+0x154>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	f000 fa9f 	bl	8003e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038d6:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <xTaskIncrementTick+0x158>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d348      	bcc.n	8003972 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <xTaskIncrementTick+0x14c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <xTaskIncrementTick+0x158>)
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	601a      	str	r2, [r3, #0]
					break;
 80038f2:	e03e      	b.n	8003972 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f4:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <xTaskIncrementTick+0x14c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d203      	bcs.n	8003914 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800390c:	4a2d      	ldr	r2, [pc, #180]	; (80039c4 <xTaskIncrementTick+0x158>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003912:	e02e      	b.n	8003972 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fee5 	bl	80026e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3318      	adds	r3, #24
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fedc 	bl	80026e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <xTaskIncrementTick+0x15c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <xTaskIncrementTick+0x15c>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <xTaskIncrementTick+0x160>)
 8003950:	441a      	add	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fe fe68 	bl	800262e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <xTaskIncrementTick+0x164>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d3b9      	bcc.n	80038e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003970:	e7b6      	b.n	80038e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <xTaskIncrementTick+0x164>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4914      	ldr	r1, [pc, #80]	; (80039cc <xTaskIncrementTick+0x160>)
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d901      	bls.n	800398e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800398a:	2301      	movs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <xTaskIncrementTick+0x168>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e004      	b.n	80039a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <xTaskIncrementTick+0x16c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <xTaskIncrementTick+0x16c>)
 80039a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000474 	.word	0x20000474
 80039b4:	20000450 	.word	0x20000450
 80039b8:	20000404 	.word	0x20000404
 80039bc:	20000408 	.word	0x20000408
 80039c0:	20000464 	.word	0x20000464
 80039c4:	2000046c 	.word	0x2000046c
 80039c8:	20000454 	.word	0x20000454
 80039cc:	20000350 	.word	0x20000350
 80039d0:	2000034c 	.word	0x2000034c
 80039d4:	20000460 	.word	0x20000460
 80039d8:	2000045c 	.word	0x2000045c

080039dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039e2:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <vTaskSwitchContext+0xa4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <vTaskSwitchContext+0xa8>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039f0:	e03f      	b.n	8003a72 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <vTaskSwitchContext+0xa8>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f8:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <vTaskSwitchContext+0xac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	f1c3 031f 	rsb	r3, r3, #31
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	491f      	ldr	r1, [pc, #124]	; (8003a8c <vTaskSwitchContext+0xb0>)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	607b      	str	r3, [r7, #4]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <vTaskSwitchContext+0x5a>
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <vTaskSwitchContext+0xb0>)
 8003a44:	4413      	add	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d104      	bne.n	8003a68 <vTaskSwitchContext+0x8c>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <vTaskSwitchContext+0xb4>)
 8003a70:	6013      	str	r3, [r2, #0]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000474 	.word	0x20000474
 8003a84:	20000460 	.word	0x20000460
 8003a88:	20000454 	.word	0x20000454
 8003a8c:	20000350 	.word	0x20000350
 8003a90:	2000034c 	.word	0x2000034c

08003a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60fb      	str	r3, [r7, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <vTaskPlaceOnEventList+0x44>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3318      	adds	r3, #24
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fe fdd7 	bl	8002676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ac8:	2101      	movs	r1, #1
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f000 fb7e 	bl	80041cc <prvAddCurrentTaskToDelayedList>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	2000034c 	.word	0x2000034c

08003adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60fb      	str	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fdeb 	bl	80026e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <xTaskRemoveFromEventList+0xac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11c      	bne.n	8003b54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fde2 	bl	80026e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <xTaskRemoveFromEventList+0xb0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <xTaskRemoveFromEventList+0xb0>)
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <xTaskRemoveFromEventList+0xb4>)
 8003b44:	441a      	add	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fe fd6e 	bl	800262e <vListInsertEnd>
 8003b52:	e005      	b.n	8003b60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3318      	adds	r3, #24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	480e      	ldr	r0, [pc, #56]	; (8003b94 <xTaskRemoveFromEventList+0xb8>)
 8003b5c:	f7fe fd67 	bl	800262e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <xTaskRemoveFromEventList+0xbc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d905      	bls.n	8003b7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <xTaskRemoveFromEventList+0xc0>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e001      	b.n	8003b7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b7e:	697b      	ldr	r3, [r7, #20]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000474 	.word	0x20000474
 8003b8c:	20000454 	.word	0x20000454
 8003b90:	20000350 	.word	0x20000350
 8003b94:	2000040c 	.word	0x2000040c
 8003b98:	2000034c 	.word	0x2000034c
 8003b9c:	20000460 	.word	0x20000460

08003ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <vTaskInternalSetTimeOutState+0x24>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <vTaskInternalSetTimeOutState+0x28>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20000464 	.word	0x20000464
 8003bc8:	20000450 	.word	0x20000450

08003bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c0e:	f000 fc71 	bl	80044f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <xTaskCheckForTimeOut+0xbc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d102      	bne.n	8003c32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e023      	b.n	8003c7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <xTaskCheckForTimeOut+0xc0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d007      	beq.n	8003c4e <xTaskCheckForTimeOut+0x82>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e015      	b.n	8003c7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d20b      	bcs.n	8003c70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff9b 	bl	8003ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	e004      	b.n	8003c7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c7a:	f000 fc6b 	bl	8004554 <vPortExitCritical>

	return xReturn;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000450 	.word	0x20000450
 8003c8c:	20000464 	.word	0x20000464

08003c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <vTaskMissedYield+0x14>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000460 	.word	0x20000460

08003ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cb0:	f000 f852 	bl	8003d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <prvIdleTask+0x28>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d9f9      	bls.n	8003cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <prvIdleTask+0x2c>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ccc:	e7f0      	b.n	8003cb0 <prvIdleTask+0x8>
 8003cce:	bf00      	nop
 8003cd0:	20000350 	.word	0x20000350
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	e00c      	b.n	8003cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <prvInitialiseTaskLists+0x60>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fc6e 	bl	80025d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d9ef      	bls.n	8003ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d04:	480d      	ldr	r0, [pc, #52]	; (8003d3c <prvInitialiseTaskLists+0x64>)
 8003d06:	f7fe fc65 	bl	80025d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d0a:	480d      	ldr	r0, [pc, #52]	; (8003d40 <prvInitialiseTaskLists+0x68>)
 8003d0c:	f7fe fc62 	bl	80025d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d10:	480c      	ldr	r0, [pc, #48]	; (8003d44 <prvInitialiseTaskLists+0x6c>)
 8003d12:	f7fe fc5f 	bl	80025d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d16:	480c      	ldr	r0, [pc, #48]	; (8003d48 <prvInitialiseTaskLists+0x70>)
 8003d18:	f7fe fc5c 	bl	80025d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d1c:	480b      	ldr	r0, [pc, #44]	; (8003d4c <prvInitialiseTaskLists+0x74>)
 8003d1e:	f7fe fc59 	bl	80025d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <prvInitialiseTaskLists+0x78>)
 8003d24:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <prvInitialiseTaskLists+0x64>)
 8003d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <prvInitialiseTaskLists+0x7c>)
 8003d2a:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <prvInitialiseTaskLists+0x68>)
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000350 	.word	0x20000350
 8003d3c:	200003dc 	.word	0x200003dc
 8003d40:	200003f0 	.word	0x200003f0
 8003d44:	2000040c 	.word	0x2000040c
 8003d48:	20000420 	.word	0x20000420
 8003d4c:	20000438 	.word	0x20000438
 8003d50:	20000404 	.word	0x20000404
 8003d54:	20000408 	.word	0x20000408

08003d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d5e:	e019      	b.n	8003d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d60:	f000 fbc8 	bl	80044f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <prvCheckTasksWaitingTermination+0x50>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fcb9 	bl	80026e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <prvCheckTasksWaitingTermination+0x54>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <prvCheckTasksWaitingTermination+0x54>)
 8003d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <prvCheckTasksWaitingTermination+0x58>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <prvCheckTasksWaitingTermination+0x58>)
 8003d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d8a:	f000 fbe3 	bl	8004554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f810 	bl	8003db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <prvCheckTasksWaitingTermination+0x58>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e1      	bne.n	8003d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000420 	.word	0x20000420
 8003dac:	2000044c 	.word	0x2000044c
 8003db0:	20000434 	.word	0x20000434

08003db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fd80 	bl	80048d0 <vPortFree>
				vPortFree( pxTCB );
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fd7d 	bl	80048d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dd6:	e018      	b.n	8003e0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d103      	bne.n	8003dea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fd74 	bl	80048d0 <vPortFree>
	}
 8003de8:	e00f      	b.n	8003e0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d00a      	beq.n	8003e0a <prvDeleteTCB+0x56>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60fb      	str	r3, [r7, #12]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <prvDeleteTCB+0x54>
	}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <prvResetNextTaskUnblockTime+0x38>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvResetNextTaskUnblockTime+0x3c>)
 8003e26:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e2c:	e008      	b.n	8003e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <prvResetNextTaskUnblockTime+0x38>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <prvResetNextTaskUnblockTime+0x3c>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	20000404 	.word	0x20000404
 8003e50:	2000046c 	.word	0x2000046c

08003e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <xTaskGetSchedulerState+0x34>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e62:	2301      	movs	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	e008      	b.n	8003e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <xTaskGetSchedulerState+0x38>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e70:	2302      	movs	r3, #2
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	e001      	b.n	8003e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e7a:	687b      	ldr	r3, [r7, #4]
	}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000458 	.word	0x20000458
 8003e8c:	20000474 	.word	0x20000474

08003e90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d05e      	beq.n	8003f64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <xTaskPriorityInherit+0xe0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d24e      	bcs.n	8003f52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db06      	blt.n	8003eca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebc:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <xTaskPriorityInherit+0xe0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f1c3 0207 	rsb	r2, r3, #7
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6959      	ldr	r1, [r3, #20]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <xTaskPriorityInherit+0xe4>)
 8003edc:	4413      	add	r3, r2
 8003ede:	4299      	cmp	r1, r3
 8003ee0:	d12f      	bne.n	8003f42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fbfe 	bl	80026e8 <uxListRemove>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43da      	mvns	r2, r3
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <xTaskPriorityInherit+0xe8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4013      	ands	r3, r2
 8003f04:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <xTaskPriorityInherit+0xe8>)
 8003f06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <xTaskPriorityInherit+0xe0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	2201      	movs	r2, #1
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <xTaskPriorityInherit+0xe8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <xTaskPriorityInherit+0xe8>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <xTaskPriorityInherit+0xe4>)
 8003f32:	441a      	add	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fb77 	bl	800262e <vListInsertEnd>
 8003f40:	e004      	b.n	8003f4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <xTaskPriorityInherit+0xe0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e008      	b.n	8003f64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <xTaskPriorityInherit+0xe0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d201      	bcs.n	8003f64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f64:	68fb      	ldr	r3, [r7, #12]
	}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	2000034c 	.word	0x2000034c
 8003f74:	20000350 	.word	0x20000350
 8003f78:	20000454 	.word	0x20000454

08003f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d06e      	beq.n	8004070 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <xTaskPriorityDisinherit+0x100>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d00a      	beq.n	8003fb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60fb      	str	r3, [r7, #12]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	1e5a      	subs	r2, r3, #1
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d044      	beq.n	8004070 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d140      	bne.n	8004070 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fb78 	bl	80026e8 <uxListRemove>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	491f      	ldr	r1, [pc, #124]	; (8004080 <xTaskPriorityDisinherit+0x104>)
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTaskPriorityDisinherit+0xae>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2201      	movs	r2, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <xTaskPriorityDisinherit+0x108>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4013      	ands	r3, r2
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <xTaskPriorityDisinherit+0x108>)
 8004028:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f1c3 0207 	rsb	r2, r3, #7
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	2201      	movs	r2, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <xTaskPriorityDisinherit+0x108>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <xTaskPriorityDisinherit+0x108>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a08      	ldr	r2, [pc, #32]	; (8004080 <xTaskPriorityDisinherit+0x104>)
 800405e:	441a      	add	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7fe fae1 	bl	800262e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004070:	697b      	ldr	r3, [r7, #20]
	}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2000034c 	.word	0x2000034c
 8004080:	20000350 	.word	0x20000350
 8004084:	20000454 	.word	0x20000454

08004088 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d077      	beq.n	8004190 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60fb      	str	r3, [r7, #12]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d902      	bls.n	80040ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e002      	b.n	80040d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d058      	beq.n	8004190 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d153      	bne.n	8004190 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d10a      	bne.n	8004108 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	60bb      	str	r3, [r7, #8]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db04      	blt.n	8004126 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0207 	rsb	r2, r3, #7
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004136:	4413      	add	r3, r2
 8004138:	4299      	cmp	r1, r3
 800413a:	d129      	bne.n	8004190 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fad1 	bl	80026e8 <uxListRemove>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2201      	movs	r2, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43da      	mvns	r2, r3
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4013      	ands	r3, r2
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004160:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	2201      	movs	r2, #1
 8004168:	409a      	lsls	r2, r3
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004182:	441a      	add	r2, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7fe fa4f 	bl	800262e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004190:	bf00      	nop
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	2000034c 	.word	0x2000034c
 800419c:	20000350 	.word	0x20000350
 80041a0:	20000454 	.word	0x20000454

080041a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b6:	3201      	adds	r2, #1
 80041b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041bc:	681b      	ldr	r3, [r3, #0]
	}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	2000034c 	.word	0x2000034c

080041cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <prvAddCurrentTaskToDelayedList+0xb0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fa80 	bl	80026e8 <uxListRemove>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4013      	ands	r3, r2
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004204:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d10a      	bne.n	8004224 <prvAddCurrentTaskToDelayedList+0x58>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	481a      	ldr	r0, [pc, #104]	; (8004288 <prvAddCurrentTaskToDelayedList+0xbc>)
 800421e:	f7fe fa06 	bl	800262e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004222:	e026      	b.n	8004272 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d209      	bcs.n	8004250 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <prvAddCurrentTaskToDelayedList+0xc0>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe fa14 	bl	8002676 <vListInsert>
}
 800424e:	e010      	b.n	8004272 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f7fe fa0a 	bl	8002676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d202      	bcs.n	8004272 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <prvAddCurrentTaskToDelayedList+0xc8>)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6013      	str	r3, [r2, #0]
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000450 	.word	0x20000450
 8004280:	2000034c 	.word	0x2000034c
 8004284:	20000454 	.word	0x20000454
 8004288:	20000438 	.word	0x20000438
 800428c:	20000408 	.word	0x20000408
 8004290:	20000404 	.word	0x20000404
 8004294:	2000046c 	.word	0x2000046c

08004298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b04      	subs	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3b04      	subs	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042c8:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <pxPortInitialiseStack+0x64>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b14      	subs	r3, #20
 80042d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b04      	subs	r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f06f 0202 	mvn.w	r2, #2
 80042e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b20      	subs	r3, #32
 80042ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	08004301 	.word	0x08004301

08004300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <prvTaskExitError+0x54>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d00a      	beq.n	800432a <prvTaskExitError+0x2a>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <prvTaskExitError+0x28>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800433e:	bf00      	nop
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0fc      	beq.n	8004340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	2000000c 	.word	0x2000000c
	...

08004360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <pxCurrentTCBConst2>)
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	6808      	ldr	r0, [r1, #0]
 8004366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	f380 8809 	msr	PSP, r0
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f380 8811 	msr	BASEPRI, r0
 800437a:	4770      	bx	lr
 800437c:	f3af 8000 	nop.w

08004380 <pxCurrentTCBConst2>:
 8004380:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop

08004388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004388:	4808      	ldr	r0, [pc, #32]	; (80043ac <prvPortStartFirstTask+0x24>)
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	6800      	ldr	r0, [r0, #0]
 800438e:	f380 8808 	msr	MSP, r0
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8814 	msr	CONTROL, r0
 800439a:	b662      	cpsie	i
 800439c:	b661      	cpsie	f
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	df00      	svc	0
 80043a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043aa:	bf00      	nop
 80043ac:	e000ed08 	.word	0xe000ed08

080043b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <xPortStartScheduler+0x120>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a46      	ldr	r2, [pc, #280]	; (80044d4 <xPortStartScheduler+0x124>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10a      	bne.n	80043d6 <xPortStartScheduler+0x26>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	613b      	str	r3, [r7, #16]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043d6:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <xPortStartScheduler+0x120>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <xPortStartScheduler+0x128>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10a      	bne.n	80043f6 <xPortStartScheduler+0x46>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <xPortStartScheduler+0x12c>)
 80043f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <xPortStartScheduler+0x130>)
 800441c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <xPortStartScheduler+0x134>)
 8004420:	2207      	movs	r2, #7
 8004422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004424:	e009      	b.n	800443a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <xPortStartScheduler+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3b01      	subs	r3, #1
 800442c:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <xPortStartScheduler+0x134>)
 800442e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d0ef      	beq.n	8004426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <xPortStartScheduler+0x134>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1c3 0307 	rsb	r3, r3, #7
 800444e:	2b04      	cmp	r3, #4
 8004450:	d00a      	beq.n	8004468 <xPortStartScheduler+0xb8>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004468:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <xPortStartScheduler+0x134>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <xPortStartScheduler+0x134>)
 8004470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <xPortStartScheduler+0x134>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800447a:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <xPortStartScheduler+0x134>)
 800447c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <xPortStartScheduler+0x138>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <xPortStartScheduler+0x138>)
 800448c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <xPortStartScheduler+0x138>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <xPortStartScheduler+0x138>)
 8004498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800449c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800449e:	f000 f8dd 	bl	800465c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <xPortStartScheduler+0x13c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044a8:	f000 f8fc 	bl	80046a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <xPortStartScheduler+0x140>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0f      	ldr	r2, [pc, #60]	; (80044f0 <xPortStartScheduler+0x140>)
 80044b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044b8:	f7ff ff66 	bl	8004388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044bc:	f7ff fa8e 	bl	80039dc <vTaskSwitchContext>
	prvTaskExitError();
 80044c0:	f7ff ff1e 	bl	8004300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000ed00 	.word	0xe000ed00
 80044d4:	410fc271 	.word	0x410fc271
 80044d8:	410fc270 	.word	0x410fc270
 80044dc:	e000e400 	.word	0xe000e400
 80044e0:	20000478 	.word	0x20000478
 80044e4:	2000047c 	.word	0x2000047c
 80044e8:	e000ed20 	.word	0xe000ed20
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	e000ef34 	.word	0xe000ef34

080044f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	607b      	str	r3, [r7, #4]
}
 800450c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <vPortEnterCritical+0x58>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <vPortEnterCritical+0x58>)
 8004516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <vPortEnterCritical+0x58>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10f      	bne.n	8004540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <vPortEnterCritical+0x5c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <vPortEnterCritical+0x4c>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	603b      	str	r3, [r7, #0]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <vPortEnterCritical+0x4a>
	}
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	2000000c 	.word	0x2000000c
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <vPortExitCritical+0x50>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <vPortExitCritical+0x24>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	607b      	str	r3, [r7, #4]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <vPortExitCritical+0x50>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3b01      	subs	r3, #1
 800457e:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <vPortExitCritical+0x50>)
 8004580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <vPortExitCritical+0x50>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <vPortExitCritical+0x42>
 800458a:	2300      	movs	r3, #0
 800458c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f383 8811 	msr	BASEPRI, r3
}
 8004594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c
	...

080045b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045b0:	f3ef 8009 	mrs	r0, PSP
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <pxCurrentTCBConst>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	f01e 0f10 	tst.w	lr, #16
 80045c0:	bf08      	it	eq
 80045c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045d4:	f380 8811 	msr	BASEPRI, r0
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f7ff f9fc 	bl	80039dc <vTaskSwitchContext>
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f380 8811 	msr	BASEPRI, r0
 80045ec:	bc09      	pop	{r0, r3}
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	6808      	ldr	r0, [r1, #0]
 80045f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f6:	f01e 0f10 	tst.w	lr, #16
 80045fa:	bf08      	it	eq
 80045fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004600:	f380 8809 	msr	PSP, r0
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst>:
 8004610:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	607b      	str	r3, [r7, #4]
}
 8004630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004632:	f7ff f91b 	bl	800386c <xTaskIncrementTick>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <xPortSysTickHandler+0x40>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f383 8811 	msr	BASEPRI, r3
}
 800464e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <vPortSetupTimerInterrupt+0x34>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <vPortSetupTimerInterrupt+0x38>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vPortSetupTimerInterrupt+0x3c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0a      	ldr	r2, [pc, #40]	; (800469c <vPortSetupTimerInterrupt+0x40>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <vPortSetupTimerInterrupt+0x44>)
 800467a:	3b01      	subs	r3, #1
 800467c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <vPortSetupTimerInterrupt+0x34>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010
 8004694:	e000e018 	.word	0xe000e018
 8004698:	20000000 	.word	0x20000000
 800469c:	10624dd3 	.word	0x10624dd3
 80046a0:	e000e014 	.word	0xe000e014

080046a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046b4 <vPortEnableVFP+0x10>
 80046a8:	6801      	ldr	r1, [r0, #0]
 80046aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ae:	6001      	str	r1, [r0, #0]
 80046b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046b2:	bf00      	nop
 80046b4:	e000ed88 	.word	0xe000ed88

080046b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046be:	f3ef 8305 	mrs	r3, IPSR
 80046c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b0f      	cmp	r3, #15
 80046c8:	d914      	bls.n	80046f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <vPortValidateInterruptPriority+0x70>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <vPortValidateInterruptPriority+0x74>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	7afa      	ldrb	r2, [r7, #11]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d20a      	bcs.n	80046f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	607b      	str	r3, [r7, #4]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <vPortValidateInterruptPriority+0x78>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <vPortValidateInterruptPriority+0x7c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d90a      	bls.n	800471a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	603b      	str	r3, [r7, #0]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <vPortValidateInterruptPriority+0x60>
	}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	e000e3f0 	.word	0xe000e3f0
 800472c:	20000478 	.word	0x20000478
 8004730:	e000ed0c 	.word	0xe000ed0c
 8004734:	2000047c 	.word	0x2000047c

08004738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004744:	f7fe ffe8 	bl	8003718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004748:	4b5b      	ldr	r3, [pc, #364]	; (80048b8 <pvPortMalloc+0x180>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004750:	f000 f920 	bl	8004994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <pvPortMalloc+0x184>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 8093 	bne.w	8004888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01d      	beq.n	80047a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004768:	2208      	movs	r2, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	3308      	adds	r3, #8
 8004782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <pvPortMalloc+0x6c>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	617b      	str	r3, [r7, #20]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d06e      	beq.n	8004888 <pvPortMalloc+0x150>
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <pvPortMalloc+0x188>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d869      	bhi.n	8004888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <pvPortMalloc+0x18c>)
 80047b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <pvPortMalloc+0x18c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047be:	e004      	b.n	80047ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d903      	bls.n	80047dc <pvPortMalloc+0xa4>
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f1      	bne.n	80047c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <pvPortMalloc+0x180>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d050      	beq.n	8004888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2208      	movs	r2, #8
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	2308      	movs	r3, #8
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	429a      	cmp	r2, r3
 8004806:	d91f      	bls.n	8004848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <pvPortMalloc+0xf8>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	613b      	str	r3, [r7, #16]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004842:	69b8      	ldr	r0, [r7, #24]
 8004844:	f000 f908 	bl	8004a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <pvPortMalloc+0x188>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <pvPortMalloc+0x188>)
 8004854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <pvPortMalloc+0x188>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <pvPortMalloc+0x190>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d203      	bcs.n	800486a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004862:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <pvPortMalloc+0x188>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <pvPortMalloc+0x190>)
 8004868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <pvPortMalloc+0x184>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	431a      	orrs	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800487e:	4b13      	ldr	r3, [pc, #76]	; (80048cc <pvPortMalloc+0x194>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a11      	ldr	r2, [pc, #68]	; (80048cc <pvPortMalloc+0x194>)
 8004886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004888:	f7fe ff54 	bl	8003734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <pvPortMalloc+0x174>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60fb      	str	r3, [r7, #12]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <pvPortMalloc+0x172>
	return pvReturn;
 80048ac:	69fb      	ldr	r3, [r7, #28]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3728      	adds	r7, #40	; 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20004088 	.word	0x20004088
 80048bc:	2000409c 	.word	0x2000409c
 80048c0:	2000408c 	.word	0x2000408c
 80048c4:	20004080 	.word	0x20004080
 80048c8:	20004090 	.word	0x20004090
 80048cc:	20004094 	.word	0x20004094

080048d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04d      	beq.n	800497e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048e2:	2308      	movs	r3, #8
 80048e4:	425b      	negs	r3, r3
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4413      	add	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <vPortFree+0xb8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <vPortFree+0x44>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	60fb      	str	r3, [r7, #12]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <vPortFree+0x62>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60bb      	str	r3, [r7, #8]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <vPortFree+0xb8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01e      	beq.n	800497e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11a      	bne.n	800497e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <vPortFree+0xb8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004958:	f7fe fede 	bl	8003718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <vPortFree+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4413      	add	r3, r2
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <vPortFree+0xbc>)
 8004968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800496a:	6938      	ldr	r0, [r7, #16]
 800496c:	f000 f874 	bl	8004a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <vPortFree+0xc0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <vPortFree+0xc0>)
 8004978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800497a:	f7fe fedb 	bl	8003734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800497e:	bf00      	nop
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	2000409c 	.word	0x2000409c
 800498c:	2000408c 	.word	0x2000408c
 8004990:	20004098 	.word	0x20004098

08004994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800499a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800499e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <prvHeapInit+0xac>)
 80049a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3307      	adds	r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <prvHeapInit+0xac>)
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <prvHeapInit+0xb0>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <prvHeapInit+0xb0>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049e0:	2208      	movs	r2, #8
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <prvHeapInit+0xb4>)
 80049f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <prvHeapInit+0xb4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <prvHeapInit+0xb4>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <prvHeapInit+0xb8>)
 8004a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <prvHeapInit+0xbc>)
 8004a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <prvHeapInit+0xc0>)
 8004a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000480 	.word	0x20000480
 8004a44:	20004080 	.word	0x20004080
 8004a48:	20004088 	.word	0x20004088
 8004a4c:	20004090 	.word	0x20004090
 8004a50:	2000408c 	.word	0x2000408c
 8004a54:	2000409c 	.word	0x2000409c

08004a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a60:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <prvInsertBlockIntoFreeList+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e002      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x14>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d8f7      	bhi.n	8004a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	4413      	add	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d108      	bne.n	8004a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d118      	bne.n	8004ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d00d      	beq.n	8004ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e008      	b.n	8004ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e003      	b.n	8004ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d002      	beq.n	8004af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20004080 	.word	0x20004080
 8004b08:	20004088 	.word	0x20004088

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000010 	.word	0x20000010

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fc8e 	bl	800544c <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	080055c0 	.word	0x080055c0
 8004b54:	080055c0 	.word	0x080055c0
 8004b58:	080055c0 	.word	0x080055c0
 8004b5c:	080055c4 	.word	0x080055c4

08004b60 <memcpy>:
 8004b60:	440a      	add	r2, r1
 8004b62:	4291      	cmp	r1, r2
 8004b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b68:	d100      	bne.n	8004b6c <memcpy+0xc>
 8004b6a:	4770      	bx	lr
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b76:	4291      	cmp	r1, r2
 8004b78:	d1f9      	bne.n	8004b6e <memcpy+0xe>
 8004b7a:	bd10      	pop	{r4, pc}

08004b7c <memset>:
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d100      	bne.n	8004b86 <memset+0xa>
 8004b84:	4770      	bx	lr
 8004b86:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8a:	e7f9      	b.n	8004b80 <memset+0x4>

08004b8c <siprintf>:
 8004b8c:	b40e      	push	{r1, r2, r3}
 8004b8e:	b500      	push	{lr}
 8004b90:	b09c      	sub	sp, #112	; 0x70
 8004b92:	ab1d      	add	r3, sp, #116	; 0x74
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	9006      	str	r0, [sp, #24]
 8004b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b9c:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <siprintf+0x38>)
 8004b9e:	9107      	str	r1, [sp, #28]
 8004ba0:	9104      	str	r1, [sp, #16]
 8004ba2:	4909      	ldr	r1, [pc, #36]	; (8004bc8 <siprintf+0x3c>)
 8004ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	a902      	add	r1, sp, #8
 8004bb0:	f000 f868 	bl	8004c84 <_svfiprintf_r>
 8004bb4:	9b02      	ldr	r3, [sp, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	b01c      	add	sp, #112	; 0x70
 8004bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc0:	b003      	add	sp, #12
 8004bc2:	4770      	bx	lr
 8004bc4:	20000010 	.word	0x20000010
 8004bc8:	ffff0208 	.word	0xffff0208

08004bcc <__ssputs_r>:
 8004bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	688e      	ldr	r6, [r1, #8]
 8004bd2:	429e      	cmp	r6, r3
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4690      	mov	r8, r2
 8004bda:	461f      	mov	r7, r3
 8004bdc:	d838      	bhi.n	8004c50 <__ssputs_r+0x84>
 8004bde:	898a      	ldrh	r2, [r1, #12]
 8004be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be4:	d032      	beq.n	8004c4c <__ssputs_r+0x80>
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	6909      	ldr	r1, [r1, #16]
 8004bea:	eba5 0901 	sub.w	r9, r5, r1
 8004bee:	6965      	ldr	r5, [r4, #20]
 8004bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	444b      	add	r3, r9
 8004bfc:	106d      	asrs	r5, r5, #1
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	bf38      	it	cc
 8004c02:	461d      	movcc	r5, r3
 8004c04:	0553      	lsls	r3, r2, #21
 8004c06:	d531      	bpl.n	8004c6c <__ssputs_r+0xa0>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f000 fb55 	bl	80052b8 <_malloc_r>
 8004c0e:	4606      	mov	r6, r0
 8004c10:	b950      	cbnz	r0, 8004c28 <__ssputs_r+0x5c>
 8004c12:	230c      	movs	r3, #12
 8004c14:	f8ca 3000 	str.w	r3, [sl]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c28:	6921      	ldr	r1, [r4, #16]
 8004c2a:	464a      	mov	r2, r9
 8004c2c:	f7ff ff98 	bl	8004b60 <memcpy>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	6126      	str	r6, [r4, #16]
 8004c3e:	6165      	str	r5, [r4, #20]
 8004c40:	444e      	add	r6, r9
 8004c42:	eba5 0509 	sub.w	r5, r5, r9
 8004c46:	6026      	str	r6, [r4, #0]
 8004c48:	60a5      	str	r5, [r4, #8]
 8004c4a:	463e      	mov	r6, r7
 8004c4c:	42be      	cmp	r6, r7
 8004c4e:	d900      	bls.n	8004c52 <__ssputs_r+0x86>
 8004c50:	463e      	mov	r6, r7
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	4632      	mov	r2, r6
 8004c56:	4641      	mov	r1, r8
 8004c58:	f000 faa8 	bl	80051ac <memmove>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	1b9b      	subs	r3, r3, r6
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	4433      	add	r3, r6
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	2000      	movs	r0, #0
 8004c6a:	e7db      	b.n	8004c24 <__ssputs_r+0x58>
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	f000 fb97 	bl	80053a0 <_realloc_r>
 8004c72:	4606      	mov	r6, r0
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1e1      	bne.n	8004c3c <__ssputs_r+0x70>
 8004c78:	6921      	ldr	r1, [r4, #16]
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	f000 fab0 	bl	80051e0 <_free_r>
 8004c80:	e7c7      	b.n	8004c12 <__ssputs_r+0x46>
	...

08004c84 <_svfiprintf_r>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	4698      	mov	r8, r3
 8004c8a:	898b      	ldrh	r3, [r1, #12]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	b09d      	sub	sp, #116	; 0x74
 8004c90:	4607      	mov	r7, r0
 8004c92:	460d      	mov	r5, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	d50e      	bpl.n	8004cb6 <_svfiprintf_r+0x32>
 8004c98:	690b      	ldr	r3, [r1, #16]
 8004c9a:	b963      	cbnz	r3, 8004cb6 <_svfiprintf_r+0x32>
 8004c9c:	2140      	movs	r1, #64	; 0x40
 8004c9e:	f000 fb0b 	bl	80052b8 <_malloc_r>
 8004ca2:	6028      	str	r0, [r5, #0]
 8004ca4:	6128      	str	r0, [r5, #16]
 8004ca6:	b920      	cbnz	r0, 8004cb2 <_svfiprintf_r+0x2e>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e0d1      	b.n	8004e56 <_svfiprintf_r+0x1d2>
 8004cb2:	2340      	movs	r3, #64	; 0x40
 8004cb4:	616b      	str	r3, [r5, #20]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cba:	2320      	movs	r3, #32
 8004cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc4:	2330      	movs	r3, #48	; 0x30
 8004cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e70 <_svfiprintf_r+0x1ec>
 8004cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cce:	f04f 0901 	mov.w	r9, #1
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	469a      	mov	sl, r3
 8004cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cda:	b10a      	cbz	r2, 8004ce0 <_svfiprintf_r+0x5c>
 8004cdc:	2a25      	cmp	r2, #37	; 0x25
 8004cde:	d1f9      	bne.n	8004cd4 <_svfiprintf_r+0x50>
 8004ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce4:	d00b      	beq.n	8004cfe <_svfiprintf_r+0x7a>
 8004ce6:	465b      	mov	r3, fp
 8004ce8:	4622      	mov	r2, r4
 8004cea:	4629      	mov	r1, r5
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff ff6d 	bl	8004bcc <__ssputs_r>
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f000 80aa 	beq.w	8004e4c <_svfiprintf_r+0x1c8>
 8004cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cfa:	445a      	add	r2, fp
 8004cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a2 	beq.w	8004e4c <_svfiprintf_r+0x1c8>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d12:	f10a 0a01 	add.w	sl, sl, #1
 8004d16:	9304      	str	r3, [sp, #16]
 8004d18:	9307      	str	r3, [sp, #28]
 8004d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d20:	4654      	mov	r4, sl
 8004d22:	2205      	movs	r2, #5
 8004d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d28:	4851      	ldr	r0, [pc, #324]	; (8004e70 <_svfiprintf_r+0x1ec>)
 8004d2a:	f7fb fa61 	bl	80001f0 <memchr>
 8004d2e:	9a04      	ldr	r2, [sp, #16]
 8004d30:	b9d8      	cbnz	r0, 8004d6a <_svfiprintf_r+0xe6>
 8004d32:	06d0      	lsls	r0, r2, #27
 8004d34:	bf44      	itt	mi
 8004d36:	2320      	movmi	r3, #32
 8004d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3c:	0711      	lsls	r1, r2, #28
 8004d3e:	bf44      	itt	mi
 8004d40:	232b      	movmi	r3, #43	; 0x2b
 8004d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d46:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4c:	d015      	beq.n	8004d7a <_svfiprintf_r+0xf6>
 8004d4e:	9a07      	ldr	r2, [sp, #28]
 8004d50:	4654      	mov	r4, sl
 8004d52:	2000      	movs	r0, #0
 8004d54:	f04f 0c0a 	mov.w	ip, #10
 8004d58:	4621      	mov	r1, r4
 8004d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5e:	3b30      	subs	r3, #48	; 0x30
 8004d60:	2b09      	cmp	r3, #9
 8004d62:	d94e      	bls.n	8004e02 <_svfiprintf_r+0x17e>
 8004d64:	b1b0      	cbz	r0, 8004d94 <_svfiprintf_r+0x110>
 8004d66:	9207      	str	r2, [sp, #28]
 8004d68:	e014      	b.n	8004d94 <_svfiprintf_r+0x110>
 8004d6a:	eba0 0308 	sub.w	r3, r0, r8
 8004d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d72:	4313      	orrs	r3, r2
 8004d74:	9304      	str	r3, [sp, #16]
 8004d76:	46a2      	mov	sl, r4
 8004d78:	e7d2      	b.n	8004d20 <_svfiprintf_r+0x9c>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	1d19      	adds	r1, r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9103      	str	r1, [sp, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfbb      	ittet	lt
 8004d86:	425b      	neglt	r3, r3
 8004d88:	f042 0202 	orrlt.w	r2, r2, #2
 8004d8c:	9307      	strge	r3, [sp, #28]
 8004d8e:	9307      	strlt	r3, [sp, #28]
 8004d90:	bfb8      	it	lt
 8004d92:	9204      	strlt	r2, [sp, #16]
 8004d94:	7823      	ldrb	r3, [r4, #0]
 8004d96:	2b2e      	cmp	r3, #46	; 0x2e
 8004d98:	d10c      	bne.n	8004db4 <_svfiprintf_r+0x130>
 8004d9a:	7863      	ldrb	r3, [r4, #1]
 8004d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9e:	d135      	bne.n	8004e0c <_svfiprintf_r+0x188>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	9203      	str	r2, [sp, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bfb8      	it	lt
 8004dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004db0:	3402      	adds	r4, #2
 8004db2:	9305      	str	r3, [sp, #20]
 8004db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e80 <_svfiprintf_r+0x1fc>
 8004db8:	7821      	ldrb	r1, [r4, #0]
 8004dba:	2203      	movs	r2, #3
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	f7fb fa17 	bl	80001f0 <memchr>
 8004dc2:	b140      	cbz	r0, 8004dd6 <_svfiprintf_r+0x152>
 8004dc4:	2340      	movs	r3, #64	; 0x40
 8004dc6:	eba0 000a 	sub.w	r0, r0, sl
 8004dca:	fa03 f000 	lsl.w	r0, r3, r0
 8004dce:	9b04      	ldr	r3, [sp, #16]
 8004dd0:	4303      	orrs	r3, r0
 8004dd2:	3401      	adds	r4, #1
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dda:	4826      	ldr	r0, [pc, #152]	; (8004e74 <_svfiprintf_r+0x1f0>)
 8004ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004de0:	2206      	movs	r2, #6
 8004de2:	f7fb fa05 	bl	80001f0 <memchr>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d038      	beq.n	8004e5c <_svfiprintf_r+0x1d8>
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <_svfiprintf_r+0x1f4>)
 8004dec:	bb1b      	cbnz	r3, 8004e36 <_svfiprintf_r+0x1b2>
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	3307      	adds	r3, #7
 8004df2:	f023 0307 	bic.w	r3, r3, #7
 8004df6:	3308      	adds	r3, #8
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dfc:	4433      	add	r3, r6
 8004dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004e00:	e767      	b.n	8004cd2 <_svfiprintf_r+0x4e>
 8004e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e06:	460c      	mov	r4, r1
 8004e08:	2001      	movs	r0, #1
 8004e0a:	e7a5      	b.n	8004d58 <_svfiprintf_r+0xd4>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	3401      	adds	r4, #1
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 0c0a 	mov.w	ip, #10
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e1e:	3a30      	subs	r2, #48	; 0x30
 8004e20:	2a09      	cmp	r2, #9
 8004e22:	d903      	bls.n	8004e2c <_svfiprintf_r+0x1a8>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0c5      	beq.n	8004db4 <_svfiprintf_r+0x130>
 8004e28:	9105      	str	r1, [sp, #20]
 8004e2a:	e7c3      	b.n	8004db4 <_svfiprintf_r+0x130>
 8004e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e30:	4604      	mov	r4, r0
 8004e32:	2301      	movs	r3, #1
 8004e34:	e7f0      	b.n	8004e18 <_svfiprintf_r+0x194>
 8004e36:	ab03      	add	r3, sp, #12
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <_svfiprintf_r+0x1f8>)
 8004e3e:	a904      	add	r1, sp, #16
 8004e40:	4638      	mov	r0, r7
 8004e42:	f3af 8000 	nop.w
 8004e46:	1c42      	adds	r2, r0, #1
 8004e48:	4606      	mov	r6, r0
 8004e4a:	d1d6      	bne.n	8004dfa <_svfiprintf_r+0x176>
 8004e4c:	89ab      	ldrh	r3, [r5, #12]
 8004e4e:	065b      	lsls	r3, r3, #25
 8004e50:	f53f af2c 	bmi.w	8004cac <_svfiprintf_r+0x28>
 8004e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e56:	b01d      	add	sp, #116	; 0x74
 8004e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <_svfiprintf_r+0x1f8>)
 8004e64:	a904      	add	r1, sp, #16
 8004e66:	4638      	mov	r0, r7
 8004e68:	f000 f87a 	bl	8004f60 <_printf_i>
 8004e6c:	e7eb      	b.n	8004e46 <_svfiprintf_r+0x1c2>
 8004e6e:	bf00      	nop
 8004e70:	08005584 	.word	0x08005584
 8004e74:	0800558e 	.word	0x0800558e
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004bcd 	.word	0x08004bcd
 8004e80:	0800558a 	.word	0x0800558a

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4616      	mov	r6, r2
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bfb8      	it	lt
 8004e98:	4613      	movlt	r3, r2
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_printf_common+0x26>
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	6833      	ldrmi	r3, [r6, #0]
 8004eb2:	3302      	addmi	r3, #2
 8004eb4:	6033      	strmi	r3, [r6, #0]
 8004eb6:	6825      	ldr	r5, [r4, #0]
 8004eb8:	f015 0506 	ands.w	r5, r5, #6
 8004ebc:	d106      	bne.n	8004ecc <_printf_common+0x48>
 8004ebe:	f104 0a19 	add.w	sl, r4, #25
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dc26      	bgt.n	8004f1a <_printf_common+0x96>
 8004ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed0:	1e13      	subs	r3, r2, #0
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	bf18      	it	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	0692      	lsls	r2, r2, #26
 8004eda:	d42b      	bmi.n	8004f34 <_printf_common+0xb0>
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d01e      	beq.n	8004f28 <_printf_common+0xa4>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	68e5      	ldr	r5, [r4, #12]
 8004eee:	6832      	ldr	r2, [r6, #0]
 8004ef0:	f003 0306 	and.w	r3, r3, #6
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	bf08      	it	eq
 8004ef8:	1aad      	subeq	r5, r5, r2
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	6922      	ldr	r2, [r4, #16]
 8004efe:	bf0c      	ite	eq
 8004f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f04:	2500      	movne	r5, #0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bfc4      	itt	gt
 8004f0a:	1a9b      	subgt	r3, r3, r2
 8004f0c:	18ed      	addgt	r5, r5, r3
 8004f0e:	2600      	movs	r6, #0
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xc8>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xa8>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xac>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c6      	b.n	8004ec2 <_printf_common+0x3e>
 8004f34:	18e1      	adds	r1, r4, r3
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	2030      	movs	r0, #48	; 0x30
 8004f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3e:	4422      	add	r2, r4
 8004f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f48:	3302      	adds	r3, #2
 8004f4a:	e7c7      	b.n	8004edc <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa4>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x8e>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	7e0f      	ldrb	r7, [r1, #24]
 8004f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f68:	2f78      	cmp	r7, #120	; 0x78
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	469a      	mov	sl, r3
 8004f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d8 	beq.w	8005132 <_printf_i+0x1d2>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a3 	beq.w	80050ce <_printf_i+0x16e>
 8004f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a101      	add	r1, pc, #4	; (adr r1, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	08005119 	.word	0x08005119
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fb 	.word	0x080050fb
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513b 	.word	0x0800513b
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005103 	.word	0x08005103
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	602a      	str	r2, [r5, #0]
 8005000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a3      	b.n	8005154 <_printf_i+0x1f4>
 800500c:	6820      	ldr	r0, [r4, #0]
 800500e:	6829      	ldr	r1, [r5, #0]
 8005010:	0606      	lsls	r6, r0, #24
 8005012:	f101 0304 	add.w	r3, r1, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	680e      	ldr	r6, [r1, #0]
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	2e00      	cmp	r6, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	4276      	negs	r6, r6
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502a:	230a      	movs	r3, #10
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	680e      	ldr	r6, [r1, #0]
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005036:	bf18      	it	ne
 8005038:	b236      	sxthne	r6, r6
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	0601      	lsls	r1, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681e      	ldr	r6, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0646      	lsls	r6, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881e      	ldrh	r6, [r3, #0]
 8005052:	4854      	ldr	r0, [pc, #336]	; (80051a4 <_printf_i+0x244>)
 8005054:	2f6f      	cmp	r7, #111	; 0x6f
 8005056:	bf0c      	ite	eq
 8005058:	2308      	moveq	r3, #8
 800505a:	230a      	movne	r3, #10
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6865      	ldr	r5, [r4, #4]
 8005064:	60a5      	str	r5, [r4, #8]
 8005066:	2d00      	cmp	r5, #0
 8005068:	bfa2      	ittt	ge
 800506a:	6821      	ldrge	r1, [r4, #0]
 800506c:	f021 0104 	bicge.w	r1, r1, #4
 8005070:	6021      	strge	r1, [r4, #0]
 8005072:	b90e      	cbnz	r6, 8005078 <_printf_i+0x118>
 8005074:	2d00      	cmp	r5, #0
 8005076:	d04d      	beq.n	8005114 <_printf_i+0x1b4>
 8005078:	4615      	mov	r5, r2
 800507a:	fbb6 f1f3 	udiv	r1, r6, r3
 800507e:	fb03 6711 	mls	r7, r3, r1, r6
 8005082:	5dc7      	ldrb	r7, [r0, r7]
 8005084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005088:	4637      	mov	r7, r6
 800508a:	42bb      	cmp	r3, r7
 800508c:	460e      	mov	r6, r1
 800508e:	d9f4      	bls.n	800507a <_printf_i+0x11a>
 8005090:	2b08      	cmp	r3, #8
 8005092:	d10b      	bne.n	80050ac <_printf_i+0x14c>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07de      	lsls	r6, r3, #31
 8005098:	d508      	bpl.n	80050ac <_printf_i+0x14c>
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	4299      	cmp	r1, r3
 80050a0:	bfde      	ittt	le
 80050a2:	2330      	movle	r3, #48	; 0x30
 80050a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ac:	1b52      	subs	r2, r2, r5
 80050ae:	6122      	str	r2, [r4, #16]
 80050b0:	f8cd a000 	str.w	sl, [sp]
 80050b4:	464b      	mov	r3, r9
 80050b6:	aa03      	add	r2, sp, #12
 80050b8:	4621      	mov	r1, r4
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fee2 	bl	8004e84 <_printf_common>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d14c      	bne.n	800515e <_printf_i+0x1fe>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b004      	add	sp, #16
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	4835      	ldr	r0, [pc, #212]	; (80051a4 <_printf_i+0x244>)
 80050d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050d4:	6829      	ldr	r1, [r5, #0]
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050dc:	6029      	str	r1, [r5, #0]
 80050de:	061d      	lsls	r5, r3, #24
 80050e0:	d514      	bpl.n	800510c <_printf_i+0x1ac>
 80050e2:	07df      	lsls	r7, r3, #31
 80050e4:	bf44      	itt	mi
 80050e6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ea:	6023      	strmi	r3, [r4, #0]
 80050ec:	b91e      	cbnz	r6, 80050f6 <_printf_i+0x196>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	2310      	movs	r3, #16
 80050f8:	e7b0      	b.n	800505c <_printf_i+0xfc>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	f043 0320 	orr.w	r3, r3, #32
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	2378      	movs	r3, #120	; 0x78
 8005104:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510a:	e7e3      	b.n	80050d4 <_printf_i+0x174>
 800510c:	0659      	lsls	r1, r3, #25
 800510e:	bf48      	it	mi
 8005110:	b2b6      	uxthmi	r6, r6
 8005112:	e7e6      	b.n	80050e2 <_printf_i+0x182>
 8005114:	4615      	mov	r5, r2
 8005116:	e7bb      	b.n	8005090 <_printf_i+0x130>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	6826      	ldr	r6, [r4, #0]
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	1d18      	adds	r0, r3, #4
 8005120:	6028      	str	r0, [r5, #0]
 8005122:	0635      	lsls	r5, r6, #24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	d501      	bpl.n	800512c <_printf_i+0x1cc>
 8005128:	6019      	str	r1, [r3, #0]
 800512a:	e002      	b.n	8005132 <_printf_i+0x1d2>
 800512c:	0670      	lsls	r0, r6, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0x1c8>
 8005130:	8019      	strh	r1, [r3, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	4615      	mov	r5, r2
 8005138:	e7ba      	b.n	80050b0 <_printf_i+0x150>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	1d1a      	adds	r2, r3, #4
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	2100      	movs	r1, #0
 8005146:	4628      	mov	r0, r5
 8005148:	f7fb f852 	bl	80001f0 <memchr>
 800514c:	b108      	cbz	r0, 8005152 <_printf_i+0x1f2>
 800514e:	1b40      	subs	r0, r0, r5
 8005150:	6060      	str	r0, [r4, #4]
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	2300      	movs	r3, #0
 8005158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515c:	e7a8      	b.n	80050b0 <_printf_i+0x150>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	462a      	mov	r2, r5
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	47d0      	blx	sl
 8005168:	3001      	adds	r0, #1
 800516a:	d0ab      	beq.n	80050c4 <_printf_i+0x164>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	d413      	bmi.n	800519a <_printf_i+0x23a>
 8005172:	68e0      	ldr	r0, [r4, #12]
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	4298      	cmp	r0, r3
 8005178:	bfb8      	it	lt
 800517a:	4618      	movlt	r0, r3
 800517c:	e7a4      	b.n	80050c8 <_printf_i+0x168>
 800517e:	2301      	movs	r3, #1
 8005180:	4632      	mov	r2, r6
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	47d0      	blx	sl
 8005188:	3001      	adds	r0, #1
 800518a:	d09b      	beq.n	80050c4 <_printf_i+0x164>
 800518c:	3501      	adds	r5, #1
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	9903      	ldr	r1, [sp, #12]
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	42ab      	cmp	r3, r5
 8005196:	dcf2      	bgt.n	800517e <_printf_i+0x21e>
 8005198:	e7eb      	b.n	8005172 <_printf_i+0x212>
 800519a:	2500      	movs	r5, #0
 800519c:	f104 0619 	add.w	r6, r4, #25
 80051a0:	e7f5      	b.n	800518e <_printf_i+0x22e>
 80051a2:	bf00      	nop
 80051a4:	08005595 	.word	0x08005595
 80051a8:	080055a6 	.word	0x080055a6

080051ac <memmove>:
 80051ac:	4288      	cmp	r0, r1
 80051ae:	b510      	push	{r4, lr}
 80051b0:	eb01 0402 	add.w	r4, r1, r2
 80051b4:	d902      	bls.n	80051bc <memmove+0x10>
 80051b6:	4284      	cmp	r4, r0
 80051b8:	4623      	mov	r3, r4
 80051ba:	d807      	bhi.n	80051cc <memmove+0x20>
 80051bc:	1e43      	subs	r3, r0, #1
 80051be:	42a1      	cmp	r1, r4
 80051c0:	d008      	beq.n	80051d4 <memmove+0x28>
 80051c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ca:	e7f8      	b.n	80051be <memmove+0x12>
 80051cc:	4402      	add	r2, r0
 80051ce:	4601      	mov	r1, r0
 80051d0:	428a      	cmp	r2, r1
 80051d2:	d100      	bne.n	80051d6 <memmove+0x2a>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051de:	e7f7      	b.n	80051d0 <memmove+0x24>

080051e0 <_free_r>:
 80051e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051e2:	2900      	cmp	r1, #0
 80051e4:	d044      	beq.n	8005270 <_free_r+0x90>
 80051e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ea:	9001      	str	r0, [sp, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f1a1 0404 	sub.w	r4, r1, #4
 80051f2:	bfb8      	it	lt
 80051f4:	18e4      	addlt	r4, r4, r3
 80051f6:	f000 f913 	bl	8005420 <__malloc_lock>
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <_free_r+0x94>)
 80051fc:	9801      	ldr	r0, [sp, #4]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	b933      	cbnz	r3, 8005210 <_free_r+0x30>
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	6014      	str	r4, [r2, #0]
 8005206:	b003      	add	sp, #12
 8005208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800520c:	f000 b90e 	b.w	800542c <__malloc_unlock>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d908      	bls.n	8005226 <_free_r+0x46>
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1961      	adds	r1, r4, r5
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1949      	addeq	r1, r1, r5
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	e7ed      	b.n	8005202 <_free_r+0x22>
 8005226:	461a      	mov	r2, r3
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b10b      	cbz	r3, 8005230 <_free_r+0x50>
 800522c:	42a3      	cmp	r3, r4
 800522e:	d9fa      	bls.n	8005226 <_free_r+0x46>
 8005230:	6811      	ldr	r1, [r2, #0]
 8005232:	1855      	adds	r5, r2, r1
 8005234:	42a5      	cmp	r5, r4
 8005236:	d10b      	bne.n	8005250 <_free_r+0x70>
 8005238:	6824      	ldr	r4, [r4, #0]
 800523a:	4421      	add	r1, r4
 800523c:	1854      	adds	r4, r2, r1
 800523e:	42a3      	cmp	r3, r4
 8005240:	6011      	str	r1, [r2, #0]
 8005242:	d1e0      	bne.n	8005206 <_free_r+0x26>
 8005244:	681c      	ldr	r4, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	6053      	str	r3, [r2, #4]
 800524a:	4421      	add	r1, r4
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	e7da      	b.n	8005206 <_free_r+0x26>
 8005250:	d902      	bls.n	8005258 <_free_r+0x78>
 8005252:	230c      	movs	r3, #12
 8005254:	6003      	str	r3, [r0, #0]
 8005256:	e7d6      	b.n	8005206 <_free_r+0x26>
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	1961      	adds	r1, r4, r5
 800525c:	428b      	cmp	r3, r1
 800525e:	bf04      	itt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	bf04      	itt	eq
 8005268:	1949      	addeq	r1, r1, r5
 800526a:	6021      	streq	r1, [r4, #0]
 800526c:	6054      	str	r4, [r2, #4]
 800526e:	e7ca      	b.n	8005206 <_free_r+0x26>
 8005270:	b003      	add	sp, #12
 8005272:	bd30      	pop	{r4, r5, pc}
 8005274:	200040a0 	.word	0x200040a0

08005278 <sbrk_aligned>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4e0e      	ldr	r6, [pc, #56]	; (80052b4 <sbrk_aligned+0x3c>)
 800527c:	460c      	mov	r4, r1
 800527e:	6831      	ldr	r1, [r6, #0]
 8005280:	4605      	mov	r5, r0
 8005282:	b911      	cbnz	r1, 800528a <sbrk_aligned+0x12>
 8005284:	f000 f8bc 	bl	8005400 <_sbrk_r>
 8005288:	6030      	str	r0, [r6, #0]
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f8b7 	bl	8005400 <_sbrk_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d00a      	beq.n	80052ac <sbrk_aligned+0x34>
 8005296:	1cc4      	adds	r4, r0, #3
 8005298:	f024 0403 	bic.w	r4, r4, #3
 800529c:	42a0      	cmp	r0, r4
 800529e:	d007      	beq.n	80052b0 <sbrk_aligned+0x38>
 80052a0:	1a21      	subs	r1, r4, r0
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 f8ac 	bl	8005400 <_sbrk_r>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d101      	bne.n	80052b0 <sbrk_aligned+0x38>
 80052ac:	f04f 34ff 	mov.w	r4, #4294967295
 80052b0:	4620      	mov	r0, r4
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	200040a4 	.word	0x200040a4

080052b8 <_malloc_r>:
 80052b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	1ccd      	adds	r5, r1, #3
 80052be:	f025 0503 	bic.w	r5, r5, #3
 80052c2:	3508      	adds	r5, #8
 80052c4:	2d0c      	cmp	r5, #12
 80052c6:	bf38      	it	cc
 80052c8:	250c      	movcc	r5, #12
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	4607      	mov	r7, r0
 80052ce:	db01      	blt.n	80052d4 <_malloc_r+0x1c>
 80052d0:	42a9      	cmp	r1, r5
 80052d2:	d905      	bls.n	80052e0 <_malloc_r+0x28>
 80052d4:	230c      	movs	r3, #12
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	2600      	movs	r6, #0
 80052da:	4630      	mov	r0, r6
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	4e2e      	ldr	r6, [pc, #184]	; (800539c <_malloc_r+0xe4>)
 80052e2:	f000 f89d 	bl	8005420 <__malloc_lock>
 80052e6:	6833      	ldr	r3, [r6, #0]
 80052e8:	461c      	mov	r4, r3
 80052ea:	bb34      	cbnz	r4, 800533a <_malloc_r+0x82>
 80052ec:	4629      	mov	r1, r5
 80052ee:	4638      	mov	r0, r7
 80052f0:	f7ff ffc2 	bl	8005278 <sbrk_aligned>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	4604      	mov	r4, r0
 80052f8:	d14d      	bne.n	8005396 <_malloc_r+0xde>
 80052fa:	6834      	ldr	r4, [r6, #0]
 80052fc:	4626      	mov	r6, r4
 80052fe:	2e00      	cmp	r6, #0
 8005300:	d140      	bne.n	8005384 <_malloc_r+0xcc>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	4631      	mov	r1, r6
 8005306:	4638      	mov	r0, r7
 8005308:	eb04 0803 	add.w	r8, r4, r3
 800530c:	f000 f878 	bl	8005400 <_sbrk_r>
 8005310:	4580      	cmp	r8, r0
 8005312:	d13a      	bne.n	800538a <_malloc_r+0xd2>
 8005314:	6821      	ldr	r1, [r4, #0]
 8005316:	3503      	adds	r5, #3
 8005318:	1a6d      	subs	r5, r5, r1
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	4629      	mov	r1, r5
 8005328:	4638      	mov	r0, r7
 800532a:	f7ff ffa5 	bl	8005278 <sbrk_aligned>
 800532e:	3001      	adds	r0, #1
 8005330:	d02b      	beq.n	800538a <_malloc_r+0xd2>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	442b      	add	r3, r5
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	e00e      	b.n	8005358 <_malloc_r+0xa0>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	1b52      	subs	r2, r2, r5
 800533e:	d41e      	bmi.n	800537e <_malloc_r+0xc6>
 8005340:	2a0b      	cmp	r2, #11
 8005342:	d916      	bls.n	8005372 <_malloc_r+0xba>
 8005344:	1961      	adds	r1, r4, r5
 8005346:	42a3      	cmp	r3, r4
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	bf18      	it	ne
 800534c:	6059      	strne	r1, [r3, #4]
 800534e:	6863      	ldr	r3, [r4, #4]
 8005350:	bf08      	it	eq
 8005352:	6031      	streq	r1, [r6, #0]
 8005354:	5162      	str	r2, [r4, r5]
 8005356:	604b      	str	r3, [r1, #4]
 8005358:	4638      	mov	r0, r7
 800535a:	f104 060b 	add.w	r6, r4, #11
 800535e:	f000 f865 	bl	800542c <__malloc_unlock>
 8005362:	f026 0607 	bic.w	r6, r6, #7
 8005366:	1d23      	adds	r3, r4, #4
 8005368:	1af2      	subs	r2, r6, r3
 800536a:	d0b6      	beq.n	80052da <_malloc_r+0x22>
 800536c:	1b9b      	subs	r3, r3, r6
 800536e:	50a3      	str	r3, [r4, r2]
 8005370:	e7b3      	b.n	80052da <_malloc_r+0x22>
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	42a3      	cmp	r3, r4
 8005376:	bf0c      	ite	eq
 8005378:	6032      	streq	r2, [r6, #0]
 800537a:	605a      	strne	r2, [r3, #4]
 800537c:	e7ec      	b.n	8005358 <_malloc_r+0xa0>
 800537e:	4623      	mov	r3, r4
 8005380:	6864      	ldr	r4, [r4, #4]
 8005382:	e7b2      	b.n	80052ea <_malloc_r+0x32>
 8005384:	4634      	mov	r4, r6
 8005386:	6876      	ldr	r6, [r6, #4]
 8005388:	e7b9      	b.n	80052fe <_malloc_r+0x46>
 800538a:	230c      	movs	r3, #12
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4638      	mov	r0, r7
 8005390:	f000 f84c 	bl	800542c <__malloc_unlock>
 8005394:	e7a1      	b.n	80052da <_malloc_r+0x22>
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	e7de      	b.n	8005358 <_malloc_r+0xa0>
 800539a:	bf00      	nop
 800539c:	200040a0 	.word	0x200040a0

080053a0 <_realloc_r>:
 80053a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	4680      	mov	r8, r0
 80053a6:	4614      	mov	r4, r2
 80053a8:	460e      	mov	r6, r1
 80053aa:	b921      	cbnz	r1, 80053b6 <_realloc_r+0x16>
 80053ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4611      	mov	r1, r2
 80053b2:	f7ff bf81 	b.w	80052b8 <_malloc_r>
 80053b6:	b92a      	cbnz	r2, 80053c4 <_realloc_r+0x24>
 80053b8:	f7ff ff12 	bl	80051e0 <_free_r>
 80053bc:	4625      	mov	r5, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c4:	f000 f838 	bl	8005438 <_malloc_usable_size_r>
 80053c8:	4284      	cmp	r4, r0
 80053ca:	4607      	mov	r7, r0
 80053cc:	d802      	bhi.n	80053d4 <_realloc_r+0x34>
 80053ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d2:	d812      	bhi.n	80053fa <_realloc_r+0x5a>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4640      	mov	r0, r8
 80053d8:	f7ff ff6e 	bl	80052b8 <_malloc_r>
 80053dc:	4605      	mov	r5, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0ed      	beq.n	80053be <_realloc_r+0x1e>
 80053e2:	42bc      	cmp	r4, r7
 80053e4:	4622      	mov	r2, r4
 80053e6:	4631      	mov	r1, r6
 80053e8:	bf28      	it	cs
 80053ea:	463a      	movcs	r2, r7
 80053ec:	f7ff fbb8 	bl	8004b60 <memcpy>
 80053f0:	4631      	mov	r1, r6
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fef4 	bl	80051e0 <_free_r>
 80053f8:	e7e1      	b.n	80053be <_realloc_r+0x1e>
 80053fa:	4635      	mov	r5, r6
 80053fc:	e7df      	b.n	80053be <_realloc_r+0x1e>
	...

08005400 <_sbrk_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	; (800541c <_sbrk_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb fbd8 	bl	8000bc0 <_sbrk>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_sbrk_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_sbrk_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	200040a8 	.word	0x200040a8

08005420 <__malloc_lock>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__malloc_lock+0x8>)
 8005422:	f000 b811 	b.w	8005448 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	200040ac 	.word	0x200040ac

0800542c <__malloc_unlock>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__malloc_unlock+0x8>)
 800542e:	f000 b80c 	b.w	800544a <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	200040ac 	.word	0x200040ac

08005438 <_malloc_usable_size_r>:
 8005438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800543c:	1f18      	subs	r0, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbc      	itt	lt
 8005442:	580b      	ldrlt	r3, [r1, r0]
 8005444:	18c0      	addlt	r0, r0, r3
 8005446:	4770      	bx	lr

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <_init>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr

08005458 <_fini>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr
